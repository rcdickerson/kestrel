
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_x = 0;
  while (l_x < (N * M)) {
    a_1[l_x] = f[l_x];
    l_x = (l_x + 1);
  }
  int r_i = 0;
  while (r_i < N) {
    int r_j = 0;
    while (r_j < M) {
      a_2[r_i][r_j] = f[(r_i * M) + r_j];
      r_j = (r_j + 1);
    }
    r_i = (r_i + 1);
  }
 }

--------------------------
Starting simulated annealing...
Score 1.4008232 at temperature 0.9780439
Score 1.4008131 at temperature 0.96007985
Score 1.0008198 at temperature 0.744511
Score 1.0008097 at temperature 0.27145708
Simulated annealing complete.
Saw 464 configurations
Best score: 1.0008097

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  params
  (seq
    (seq
      (|>
        (basic-block
          (declaration (specifiers (type int)) r_i (initializer (const-int 0)))))
      (<|
        (basic-block
          (declaration (specifiers (type int)) l_x (initializer (const-int 0))))))
    (while-lockstep
      1
      2
      (< l_x (* N M))
      (< r_i N)
      (basic-block (= (index a_1 l_x) (index f l_x)) (= l_x (+ l_x (const-int 1))))
      (seq
        (basic-block
          (declaration (specifiers (type int)) r_j (initializer (const-int 0))))
        (seq
          (while
            (< r_j M)
            (basic-block
              (= (index (index a_2 r_i) r_j) (index f (+ (* r_i M) r_j)))
              (= r_j (+ r_j (const-int 1)))))
          (basic-block (= r_i (+ r_i (const-int 1)))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();
const int M = 10;
const int N = 10;
int a_1[N * M];
int a_2[N][M];
int f[N * M];

void main() {
  assume(1);
  int r_i = 0;
  int l_x = 0;
  while ((l_x < (N * M)) && (r_i < N)) {
    a_1[l_x] = f[l_x];
    l_x = (l_x + 1);
    int r_j = 0;
    while (r_j < M) {
      a_2[r_i][r_j] = f[(r_i * M) + r_j];
      r_j = (r_j + 1);
    }
    r_i = (r_i + 1);
    if (r_i < N) {
      int r_j = 0;
      while (r_j < M) {
        a_2[r_i][r_j] = f[(r_i * M) + r_j];
        r_j = (r_j + 1);
      }
      r_i = (r_i + 1);
    }
  }
  while ((l_x < (N * M)) && (!(r_i < N))) {
    a_1[l_x] = f[l_x];
    l_x = (l_x + 1);
  }
  while ((!(l_x < (N * M))) && (r_i < N)) {
    int r_j = 0;
    while (r_j < M) {
      a_2[r_i][r_j] = f[(r_i * M) + r_j];
      r_j = (r_j + 1);
    }
    r_i = (r_i + 1);
  }
  int i = 0;
  while (i < N) {
    int j = 0;
    while (j < M) {
      sassert(a_1[i * (M + j)] == a_2[i][j]);
    }
  }
 }

--------------------------
Writing output to ./results/antonopoulos/sa/loop-tiling.c...
Done

real	0m3.087s
user	0m3.081s
sys	0m0.005s
