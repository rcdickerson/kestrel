
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_max = a_1[0];
  int l_maxi = 0;
  int l_i = 0;
  while (l_i <= N) {
    if (l_max < a_1[l_i]) {
      l_max = a_1[l_i];
      l_maxi = l_i;
    }
    l_i = (l_i + 1);
  }
  int l_t = a_1[N];
  a_1[N] = l_max;
  a_1[l_maxi] = l_t;
  int r_j = 0;
  while (r_j <= N) {
    int r_max;
    int r_maxi;
    if (r_j == 0) {
      r_max = a_2[0];
      r_maxi = 0;
    }
    if (r_max < a_2[r_j]) {
      r_max = a_2[r_j];
      r_maxi = r_j;
    }
    if (r_j == N) {
      int r_t = a_2[N];
      a_2[N] = r_max;
      a_2[r_maxi] = r_t;
    }
    r_j = (r_j + 1);
  }
 }

--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  params
  (seq
    (<|>
      (basic-block
        (declaration
          (specifiers (type int))
          l_max
          (initializer (index a_1 (const-int 0))))
        (declaration (specifiers (type int)) l_maxi (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_j (initializer (const-int 0)))))
    (seq
      (while-lockstep
        1
        1
        (<= l_i N)
        (<= r_j N)
        (seq
          (if
            (< l_max (index a_1 l_i))
            (basic-block (= l_max (index a_1 l_i)) (= l_maxi l_i)))
          (basic-block (= l_i (+ l_i (const-int 1)))))
        (seq
          (basic-block
            (declaration (specifiers (type int)) r_max initializer)
            (declaration (specifiers (type int)) r_maxi initializer))
          (seq
            (seq
              (if
                (== r_j (const-int 0))
                (basic-block (= r_max (index a_2 (const-int 0))) (= r_maxi (const-int 0))))
              (if
                (< r_max (index a_2 r_j))
                (basic-block (= r_max (index a_2 r_j)) (= r_maxi r_j))))
            (seq
              (if
                (== r_j N)
                (basic-block
                  (declaration (specifiers (type int)) r_t (initializer (index a_2 N)))
                  (= (index a_2 N) r_max)
                  (= (index a_2 r_maxi) r_t)))
              (basic-block (= r_j (+ r_j (const-int 1))))))))
      (<|
        (basic-block
          (declaration (specifiers (type int)) l_t (initializer (index a_1 N)))
          (= (index a_1 N) l_max)
          (= (index a_1 l_maxi) l_t))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();
const int N = 10;
int a_1[N + 1];
int a_2[N + 1];

void main() {
  int _i = 0;
  while (_i < N) {
    assume(a_1[_i] == a_2[_i]);
  }
  int l_max = a_1[0];
  int l_maxi = 0;
  int l_i = 0;
  int r_j = 0;
  while ((l_i <= N) && (r_j <= N)) {
    if (l_max < a_1[l_i]) {
      l_max = a_1[l_i];
      l_maxi = l_i;
    }
    l_i = (l_i + 1);
    int r_max;
    int r_maxi;
    if (r_j == 0) {
      r_max = a_2[0];
      r_maxi = 0;
    }
    if (r_max < a_2[r_j]) {
      r_max = a_2[r_j];
      r_maxi = r_j;
    }
    if (r_j == N) {
      int r_t = a_2[N];
      a_2[N] = r_max;
      a_2[r_maxi] = r_t;
    }
    r_j = (r_j + 1);
  }
  while ((l_i <= N) && (!(r_j <= N))) {
    if (l_max < a_1[l_i]) {
      l_max = a_1[l_i];
      l_maxi = l_i;
    }
    l_i = (l_i + 1);
  }
  while ((!(l_i <= N)) && (r_j <= N)) {
    int r_max;
    int r_maxi;
    if (r_j == 0) {
      r_max = a_2[0];
      r_maxi = 0;
    }
    if (r_max < a_2[r_j]) {
      r_max = a_2[r_j];
      r_maxi = r_j;
    }
    if (r_j == N) {
      int r_t = a_2[N];
      a_2[N] = r_max;
      a_2[r_maxi] = r_t;
    }
    r_j = (r_j + 1);
  }
  int l_t = a_1[N];
  a_1[N] = l_max;
  a_1[l_maxi] = l_t;
  int _j = 0;
  while (_j < N) {
    sassert(a_1[_j] == a_2[_j]);
  }
 }

--------------------------
Writing output to ./results/barthe/count-loops/code-sinking.c...
Done

real	0m0.022s
user	0m0.010s
sys	0m0.012s
