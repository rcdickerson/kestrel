
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_N, int r_N) {
  int l_x = 0;
  int l_i = 0;
  while (l_i <= l_N) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  int r_x = 0;
  int r_i = 1;
  while (r_i <= r_N) {
    r_x = (r_x + r_i);
    r_i = (r_i + 1);
  }
 }

--------------------------
Starting simulated annealing...
Score 0.8077199 at temperature 1
Score 0.7135803 at temperature 0.744511
Score 0.6895897 at temperature 0.7025948
Score 0.68827087 at temperature 0.3752495
Simulated annealing complete.
Saw 485 configurations
Best score: 0.68827087

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_N)
    (param-declaration (specifiers (type int)) r_N))
  (seq
    (<|
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0)))))
    (seq
      (|>
        (basic-block
          (declaration (specifiers (type int)) r_x (initializer (const-int 0)))
          (declaration (specifiers (type int)) r_i (initializer (const-int 1)))))
      (while-lockstep
        2
        1
        (<= l_i l_N)
        (<= r_i r_N)
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_x (+ r_x r_i)) (= r_i (+ r_i (const-int 1))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_N = arb_int();
  int r_N = arb_int();
  assume(l_N == r_N);
  int l_x = 0;
  int l_i = 0;
  int r_x = 0;
  int r_i = 1;
  while ((l_i <= l_N) && (r_i <= r_N)) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
    if (l_i <= l_N) {
      l_x = (l_x + l_i);
      l_i = (l_i + 1);
    }
    r_x = (r_x + r_i);
    r_i = (r_i + 1);
  }
  while ((l_i <= l_N) && (!(r_i <= r_N))) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while ((!(l_i <= l_N)) && (r_i <= r_N)) {
    r_x = (r_x + r_i);
    r_i = (r_i + 1);
  }
  sassert(l_x == r_x);
 }

--------------------------
Writing output to ./results/barthe/sa/unroll.c...
Done

real	0m0.235s
user	0m0.227s
sys	0m0.008s
