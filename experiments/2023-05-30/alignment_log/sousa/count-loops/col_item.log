
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_o1, int l_o1_getCardSet, int l_o1_getCardRarity, int l_o1_getCardId, int l_o1_cardType, int l_o2, int l_o2_getCardSet, int l_o2_getCardRarity, int l_o2_getCardId, int l_o2_cardType, int r_o1, int r_o1_getCardSet, int r_o1_getCardRarity, int r_o1_getCardId, int r_o1_cardType, int r_o2, int r_o2_getCardSet, int r_o2_getCardRarity, int r_o2_getCardId, int r_o2_cardType) {
  int l_ret;
  if (l_o1 == l_o2) {
    l_ret = 0;
  } else {if (l_o1_getCardSet > l_o2_getCardSet) {
      l_ret = 1;
    } else {if (l_o1_getCardSet < l_o2_getCardSet) {
        l_ret = (-1);
      } else {if (l_o1_getCardRarity < l_o2_getCardRarity) {
          l_ret = 1;
        } else {if (l_o1_getCardRarity > l_o2_getCardRarity) {
            l_ret = (-1);
          } else {if (l_o1_getCardId > l_o2_getCardId) {
              l_ret = 1;
            } else {if (l_o1_getCardId < l_o2_getCardId) {
                l_ret = (-1);
              } else {l_ret = (l_o1_cardType - l_o2_cardType);
              }
            }
          }
        }
      }
    }
  }
  int r_ret;
  if (r_o1 == r_o2) {
    r_ret = 0;
  } else {if (r_o1_getCardSet > r_o2_getCardSet) {
      r_ret = 1;
    } else {if (r_o1_getCardSet < r_o2_getCardSet) {
        r_ret = (-1);
      } else {if (r_o1_getCardRarity < r_o2_getCardRarity) {
          r_ret = 1;
        } else {if (r_o1_getCardRarity > r_o2_getCardRarity) {
            r_ret = (-1);
          } else {if (r_o1_getCardId > r_o2_getCardId) {
              r_ret = 1;
            } else {if (r_o1_getCardId < r_o2_getCardId) {
                r_ret = (-1);
              } else {r_ret = (r_o1_cardType - r_o2_cardType);
              }
            }
          }
        }
      }
    }
  }
 }

--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_o1)
    (param-declaration (specifiers (type int)) l_o1_getCardSet)
    (param-declaration (specifiers (type int)) l_o1_getCardRarity)
    (param-declaration (specifiers (type int)) l_o1_getCardId)
    (param-declaration (specifiers (type int)) l_o1_cardType)
    (param-declaration (specifiers (type int)) l_o2)
    (param-declaration (specifiers (type int)) l_o2_getCardSet)
    (param-declaration (specifiers (type int)) l_o2_getCardRarity)
    (param-declaration (specifiers (type int)) l_o2_getCardId)
    (param-declaration (specifiers (type int)) l_o2_cardType)
    (param-declaration (specifiers (type int)) r_o1)
    (param-declaration (specifiers (type int)) r_o1_getCardSet)
    (param-declaration (specifiers (type int)) r_o1_getCardRarity)
    (param-declaration (specifiers (type int)) r_o1_getCardId)
    (param-declaration (specifiers (type int)) r_o1_cardType)
    (param-declaration (specifiers (type int)) r_o2)
    (param-declaration (specifiers (type int)) r_o2_getCardSet)
    (param-declaration (specifiers (type int)) r_o2_getCardRarity)
    (param-declaration (specifiers (type int)) r_o2_getCardId)
    (param-declaration (specifiers (type int)) r_o2_cardType))
  (<|>
    (seq
      (basic-block (declaration (specifiers (type int)) l_ret initializer))
      (if-else
        (== l_o1 l_o2)
        (basic-block (= l_ret (const-int 0)))
        (if-else
          (> l_o1_getCardSet l_o2_getCardSet)
          (basic-block (= l_ret (const-int 1)))
          (if-else
            (< l_o1_getCardSet l_o2_getCardSet)
            (basic-block (= l_ret (neg (const-int 1))))
            (if-else
              (< l_o1_getCardRarity l_o2_getCardRarity)
              (basic-block (= l_ret (const-int 1)))
              (if-else
                (> l_o1_getCardRarity l_o2_getCardRarity)
                (basic-block (= l_ret (neg (const-int 1))))
                (if-else
                  (> l_o1_getCardId l_o2_getCardId)
                  (basic-block (= l_ret (const-int 1)))
                  (if-else
                    (< l_o1_getCardId l_o2_getCardId)
                    (basic-block (= l_ret (neg (const-int 1))))
                    (basic-block (= l_ret (- l_o1_cardType l_o2_cardType)))))))))))
    (seq
      (basic-block (declaration (specifiers (type int)) r_ret initializer))
      (if-else
        (== r_o1 r_o2)
        (basic-block (= r_ret (const-int 0)))
        (if-else
          (> r_o1_getCardSet r_o2_getCardSet)
          (basic-block (= r_ret (const-int 1)))
          (if-else
            (< r_o1_getCardSet r_o2_getCardSet)
            (basic-block (= r_ret (neg (const-int 1))))
            (if-else
              (< r_o1_getCardRarity r_o2_getCardRarity)
              (basic-block (= r_ret (const-int 1)))
              (if-else
                (> r_o1_getCardRarity r_o2_getCardRarity)
                (basic-block (= r_ret (neg (const-int 1))))
                (if-else
                  (> r_o1_getCardId r_o2_getCardId)
                  (basic-block (= r_ret (const-int 1)))
                  (if-else
                    (< r_o1_getCardId r_o2_getCardId)
                    (basic-block (= r_ret (neg (const-int 1))))
                    (basic-block (= r_ret (- r_o1_cardType r_o2_cardType)))))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_o1 = arb_int();
  int l_o1_getCardSet = arb_int();
  int l_o1_getCardRarity = arb_int();
  int l_o1_getCardId = arb_int();
  int l_o1_cardType = arb_int();
  int l_o2 = arb_int();
  int l_o2_getCardSet = arb_int();
  int l_o2_getCardRarity = arb_int();
  int l_o2_getCardId = arb_int();
  int l_o2_cardType = arb_int();
  int r_o1 = arb_int();
  int r_o1_getCardSet = arb_int();
  int r_o1_getCardRarity = arb_int();
  int r_o1_getCardId = arb_int();
  int r_o1_cardType = arb_int();
  int r_o2 = arb_int();
  int r_o2_getCardSet = arb_int();
  int r_o2_getCardRarity = arb_int();
  int r_o2_getCardId = arb_int();
  int r_o2_cardType = arb_int();
  assume((l_o1 == r_o2) && ((l_o1_getCardSet == r_o2_getCardSet) && ((l_o1_getCardRarity == r_o2_getCardRarity) && ((l_o1_getCardId == r_o2_getCardId) && (l_o1_cardType == r_o2_cardType)))));
  int l_ret;
  if (l_o1 == l_o2) {
    l_ret = 0;
  } else {if (l_o1_getCardSet > l_o2_getCardSet) {
      l_ret = 1;
    } else {if (l_o1_getCardSet < l_o2_getCardSet) {
        l_ret = (-1);
      } else {if (l_o1_getCardRarity < l_o2_getCardRarity) {
          l_ret = 1;
        } else {if (l_o1_getCardRarity > l_o2_getCardRarity) {
            l_ret = (-1);
          } else {if (l_o1_getCardId > l_o2_getCardId) {
              l_ret = 1;
            } else {if (l_o1_getCardId < l_o2_getCardId) {
                l_ret = (-1);
              } else {l_ret = (l_o1_cardType - l_o2_cardType);
              }
            }
          }
        }
      }
    }
  }
  int r_ret;
  if (r_o1 == r_o2) {
    r_ret = 0;
  } else {if (r_o1_getCardSet > r_o2_getCardSet) {
      r_ret = 1;
    } else {if (r_o1_getCardSet < r_o2_getCardSet) {
        r_ret = (-1);
      } else {if (r_o1_getCardRarity < r_o2_getCardRarity) {
          r_ret = 1;
        } else {if (r_o1_getCardRarity > r_o2_getCardRarity) {
            r_ret = (-1);
          } else {if (r_o1_getCardId > r_o2_getCardId) {
              r_ret = 1;
            } else {if (r_o1_getCardId < r_o2_getCardId) {
                r_ret = (-1);
              } else {r_ret = (r_o1_cardType - r_o2_cardType);
              }
            }
          }
        }
      }
    }
  }
  sassert(l_ret == (-1 * r_ret));
 }

--------------------------
Writing output to ./results/sousa/count-loops/col_item.c...
Done

real	0m0.044s
user	0m0.004s
sys	0m0.018s
