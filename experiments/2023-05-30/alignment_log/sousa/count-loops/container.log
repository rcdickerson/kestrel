
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_o1_departureTimeIsBefore, int l_o1_departureTime, int l_o1_departureMaxDuration, int l_o1_departureTransportCompany, int l_o1_departureTransportType, int l_o2_departureTimeIsBefore, int l_o2_departureTime, int l_o2_departureMaxDuration, int l_o2_departureTransportCompany, int l_o2_departureTransportType, int r_o1_departureTimeIsBefore, int r_o1_departureTime, int r_o1_departureMaxDuration, int r_o1_departureTransportCompany, int r_o1_departureTransportType, int r_o2_departureTimeIsBefore, int r_o2_departureTime, int r_o2_departureMaxDuration, int r_o2_departureTransportCompany, int r_o2_departureTransportType) {
  int l_rv;
  if (l_o1_departureTime < l_o2_departureTime) {
    l_rv = (-1);
  } else {if (l_o2_departureTime < l_o1_departureTime) {
      l_rv = 1;
    } else {l_rv = 0;
    }
  }
  if (l_rv == 0) {
    if (l_o1_departureMaxDuration < l_o2_departureMaxDuration) {
      l_rv = (-1);
    } else {if (l_o1_departureMaxDuration > l_o2_departureMaxDuration) {
        l_rv = 1;
      } else {if (l_o1_departureTransportCompany < l_o2_departureTransportCompany) {
          l_rv = (-1);
        } else {if (l_o2_departureTransportCompany < l_o1_departureTransportCompany) {
            l_rv = 1;
          } else {l_rv = 0;
          }
        }
        if (l_rv == 0) {
          if (l_o1_departureTransportType < l_o2_departureTransportType) {
            l_rv = (-1);
          } else {if (l_o2_departureTransportType < l_o1_departureTransportType) {
              l_rv = 1;
            } else {l_rv = 0;
            }
          }
        }
      }
    }
  }
  int r_rv;
  if (r_o1_departureTime < r_o2_departureTime) {
    r_rv = (-1);
  } else {if (r_o2_departureTime < r_o1_departureTime) {
      r_rv = 1;
    } else {r_rv = 0;
    }
  }
  if (r_rv == 0) {
    if (r_o1_departureMaxDuration < r_o2_departureMaxDuration) {
      r_rv = (-1);
    } else {if (r_o1_departureMaxDuration > r_o2_departureMaxDuration) {
        r_rv = 1;
      } else {if (r_o1_departureTransportCompany < r_o2_departureTransportCompany) {
          r_rv = (-1);
        } else {if (r_o2_departureTransportCompany < r_o1_departureTransportCompany) {
            r_rv = 1;
          } else {r_rv = 0;
          }
        }
        if (r_rv == 0) {
          if (r_o1_departureTransportType < r_o2_departureTransportType) {
            r_rv = (-1);
          } else {if (r_o2_departureTransportType < r_o1_departureTransportType) {
              r_rv = 1;
            } else {r_rv = 0;
            }
          }
        }
      }
    }
  }
 }

--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_o1_departureTimeIsBefore)
    (param-declaration (specifiers (type int)) l_o1_departureTime)
    (param-declaration (specifiers (type int)) l_o1_departureMaxDuration)
    (param-declaration (specifiers (type int)) l_o1_departureTransportCompany)
    (param-declaration (specifiers (type int)) l_o1_departureTransportType)
    (param-declaration (specifiers (type int)) l_o2_departureTimeIsBefore)
    (param-declaration (specifiers (type int)) l_o2_departureTime)
    (param-declaration (specifiers (type int)) l_o2_departureMaxDuration)
    (param-declaration (specifiers (type int)) l_o2_departureTransportCompany)
    (param-declaration (specifiers (type int)) l_o2_departureTransportType)
    (param-declaration (specifiers (type int)) r_o1_departureTimeIsBefore)
    (param-declaration (specifiers (type int)) r_o1_departureTime)
    (param-declaration (specifiers (type int)) r_o1_departureMaxDuration)
    (param-declaration (specifiers (type int)) r_o1_departureTransportCompany)
    (param-declaration (specifiers (type int)) r_o1_departureTransportType)
    (param-declaration (specifiers (type int)) r_o2_departureTimeIsBefore)
    (param-declaration (specifiers (type int)) r_o2_departureTime)
    (param-declaration (specifiers (type int)) r_o2_departureMaxDuration)
    (param-declaration (specifiers (type int)) r_o2_departureTransportCompany)
    (param-declaration (specifiers (type int)) r_o2_departureTransportType))
  (seq
    (<|>
      (seq
        (basic-block (declaration (specifiers (type int)) l_rv initializer))
        (if-else
          (< l_o1_departureTime l_o2_departureTime)
          (basic-block (= l_rv (neg (const-int 1))))
          (if-else
            (< l_o2_departureTime l_o1_departureTime)
            (basic-block (= l_rv (const-int 1)))
            (basic-block (= l_rv (const-int 0))))))
      (basic-block (declaration (specifiers (type int)) r_rv initializer)))
    (<|>
      (if
        (== l_rv (const-int 0))
        (if-else
          (< l_o1_departureMaxDuration l_o2_departureMaxDuration)
          (basic-block (= l_rv (neg (const-int 1))))
          (if-else
            (> l_o1_departureMaxDuration l_o2_departureMaxDuration)
            (basic-block (= l_rv (const-int 1)))
            (seq
              (if-else
                (< l_o1_departureTransportCompany l_o2_departureTransportCompany)
                (basic-block (= l_rv (neg (const-int 1))))
                (if-else
                  (< l_o2_departureTransportCompany l_o1_departureTransportCompany)
                  (basic-block (= l_rv (const-int 1)))
                  (basic-block (= l_rv (const-int 0)))))
              (if
                (== l_rv (const-int 0))
                (if-else
                  (< l_o1_departureTransportType l_o2_departureTransportType)
                  (basic-block (= l_rv (neg (const-int 1))))
                  (if-else
                    (< l_o2_departureTransportType l_o1_departureTransportType)
                    (basic-block (= l_rv (const-int 1)))
                    (basic-block (= l_rv (const-int 0))))))))))
      (seq
        (if-else
          (< r_o1_departureTime r_o2_departureTime)
          (basic-block (= r_rv (neg (const-int 1))))
          (if-else
            (< r_o2_departureTime r_o1_departureTime)
            (basic-block (= r_rv (const-int 1)))
            (basic-block (= r_rv (const-int 0)))))
        (if
          (== r_rv (const-int 0))
          (if-else
            (< r_o1_departureMaxDuration r_o2_departureMaxDuration)
            (basic-block (= r_rv (neg (const-int 1))))
            (if-else
              (> r_o1_departureMaxDuration r_o2_departureMaxDuration)
              (basic-block (= r_rv (const-int 1)))
              (seq
                (if-else
                  (< r_o1_departureTransportCompany r_o2_departureTransportCompany)
                  (basic-block (= r_rv (neg (const-int 1))))
                  (if-else
                    (< r_o2_departureTransportCompany r_o1_departureTransportCompany)
                    (basic-block (= r_rv (const-int 1)))
                    (basic-block (= r_rv (const-int 0)))))
                (if
                  (== r_rv (const-int 0))
                  (if-else
                    (< r_o1_departureTransportType r_o2_departureTransportType)
                    (basic-block (= r_rv (neg (const-int 1))))
                    (if-else
                      (< r_o2_departureTransportType r_o1_departureTransportType)
                      (basic-block (= r_rv (const-int 1)))
                      (basic-block (= r_rv (const-int 0))))))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_o1_departureTimeIsBefore = arb_int();
  int l_o1_departureTime = arb_int();
  int l_o1_departureMaxDuration = arb_int();
  int l_o1_departureTransportCompany = arb_int();
  int l_o1_departureTransportType = arb_int();
  int l_o2_departureTimeIsBefore = arb_int();
  int l_o2_departureTime = arb_int();
  int l_o2_departureMaxDuration = arb_int();
  int l_o2_departureTransportCompany = arb_int();
  int l_o2_departureTransportType = arb_int();
  int r_o1_departureTimeIsBefore = arb_int();
  int r_o1_departureTime = arb_int();
  int r_o1_departureMaxDuration = arb_int();
  int r_o1_departureTransportCompany = arb_int();
  int r_o1_departureTransportType = arb_int();
  int r_o2_departureTimeIsBefore = arb_int();
  int r_o2_departureTime = arb_int();
  int r_o2_departureMaxDuration = arb_int();
  int r_o2_departureTransportCompany = arb_int();
  int r_o2_departureTransportType = arb_int();
  assume((l_o1_departureTimeIsBefore == r_o2_departureTimeIsBefore) && ((l_o1_departureTime == r_o2_departureTime) && ((l_o1_departureMaxDuration == r_o2_departureMaxDuration) && ((l_o1_departureTransportCompany == r_o2_departureTransportCompany) && ((l_o1_departureTransportType == r_o2_departureTransportType) && ((l_o2_departureTimeIsBefore == r_o1_departureTimeIsBefore) && ((l_o2_departureTime == r_o1_departureTime) && ((l_o2_departureMaxDuration == r_o1_departureMaxDuration) && ((l_o2_departureTransportCompany == r_o1_departureTransportCompany) && (l_o2_departureTransportType == r_o1_departureTransportType))))))))));
  int l_rv;
  if (l_o1_departureTime < l_o2_departureTime) {
    l_rv = (-1);
  } else {if (l_o2_departureTime < l_o1_departureTime) {
      l_rv = 1;
    } else {l_rv = 0;
    }
  }
  int r_rv;
  if (l_rv == 0) {
    if (l_o1_departureMaxDuration < l_o2_departureMaxDuration) {
      l_rv = (-1);
    } else {if (l_o1_departureMaxDuration > l_o2_departureMaxDuration) {
        l_rv = 1;
      } else {if (l_o1_departureTransportCompany < l_o2_departureTransportCompany) {
          l_rv = (-1);
        } else {if (l_o2_departureTransportCompany < l_o1_departureTransportCompany) {
            l_rv = 1;
          } else {l_rv = 0;
          }
        }
        if (l_rv == 0) {
          if (l_o1_departureTransportType < l_o2_departureTransportType) {
            l_rv = (-1);
          } else {if (l_o2_departureTransportType < l_o1_departureTransportType) {
              l_rv = 1;
            } else {l_rv = 0;
            }
          }
        }
      }
    }
  }
  if (r_o1_departureTime < r_o2_departureTime) {
    r_rv = (-1);
  } else {if (r_o2_departureTime < r_o1_departureTime) {
      r_rv = 1;
    } else {r_rv = 0;
    }
  }
  if (r_rv == 0) {
    if (r_o1_departureMaxDuration < r_o2_departureMaxDuration) {
      r_rv = (-1);
    } else {if (r_o1_departureMaxDuration > r_o2_departureMaxDuration) {
        r_rv = 1;
      } else {if (r_o1_departureTransportCompany < r_o2_departureTransportCompany) {
          r_rv = (-1);
        } else {if (r_o2_departureTransportCompany < r_o1_departureTransportCompany) {
            r_rv = 1;
          } else {r_rv = 0;
          }
        }
        if (r_rv == 0) {
          if (r_o1_departureTransportType < r_o2_departureTransportType) {
            r_rv = (-1);
          } else {if (r_o2_departureTransportType < r_o1_departureTransportType) {
              r_rv = 1;
            } else {r_rv = 0;
            }
          }
        }
      }
    }
  }
  sassert(l_rv == (-1 * r_rv));
 }

--------------------------
Writing output to ./results/sousa/count-loops/container.c...
Done

real	0m0.075s
user	0m0.020s
sys	0m0.034s
