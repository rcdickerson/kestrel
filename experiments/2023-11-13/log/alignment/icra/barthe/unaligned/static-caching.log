
Unaligned Product Program
--------------------------

void main(int l_a[6][4], int l_s[(6 - 5) + 1], int r_a[6][4], int r_s[(6 - 5) + 1]) {
  int l_i = 0;
  while (l_i < (6 - 5)) {
    l_s[l_i] = 0;
    int l_k = 0;
    while (l_k <= (5 - 1)) {
      int l_l = 0;
      while (l_l <= (4 - 1)) {
        l_s[l_i] = (l_s[l_i] + l_a[l_i + l_k][l_l]);
        l_l = (l_l + 1);
      }
    }
  }
  r_s[0] = 0;
  int r_b[6];
  int r_k = 0;
  while (r_k <= (5 - 1)) {
    r_b[r_k] = 0;
    int r_l = 0;
    while (r_l <= (4 - 1)) {
      r_b[r_k] = (r_b[r_k] + r_a[r_k][r_l]);
      r_l = (r_l + 1);
    }
    r_s[0] = (r_s[0] + r_b[r_k]);
    r_k = (r_k + 1);
  }
  int r_i = 1;
  while (r_i <= (6 - 5)) {
    r_b[(r_i + 5) - 1] = 0;
    int r_l = 0;
    while (r_l <= (4 - 1)) {
      r_b[(r_i + 5) - 1] = (r_b[(r_i + 5) - 1] + r_a[(r_i + 5) - 1][r_l]);
      r_l = (r_l + 1);
    }
    int r_z = r_b[(r_i + 5) - 1] - r_b[r_i - 1];
    r_s[r_i] = (r_s[r_i - 1] + r_z);
    r_i = (r_i + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (const-int 6) (const-int 4))))
    (param-declaration
      (specifiers (type int))
      (sized-array
        l_s
        (array-sizes (+ (- (const-int 6) (const-int 5)) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (const-int 6) (const-int 4))))
    (param-declaration
      (specifiers (type int))
      (sized-array
        r_s
        (array-sizes (+ (- (const-int 6) (const-int 5)) (const-int 1))))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (< l_i (- (const-int 6) (const-int 5)))
        (seq
          (basic-block
            (= (index l_s l_i) (const-int 0))
            (declaration (specifiers (type int)) l_k (initializer (const-int 0))))
          (while
            (<= l_k (- (const-int 5) (const-int 1)))
            (seq
              (basic-block
                (declaration (specifiers (type int)) l_l (initializer (const-int 0))))
              (while
                (<= l_l (- (const-int 4) (const-int 1)))
                (basic-block
                  (= (index l_s l_i) (+ (index l_s l_i) (index (index l_a (+ l_i l_k)) l_l)))
                  (= l_l (+ l_l (const-int 1))))))))))
    (seq
      (basic-block
        (= (index r_s (const-int 0)) (const-int 0))
        (declaration
          (specifiers (type int))
          (sized-array r_b (array-sizes (const-int 6)))
          no-initializer)
        (declaration (specifiers (type int)) r_k (initializer (const-int 0))))
      (seq
        (while
          (<= r_k (- (const-int 5) (const-int 1)))
          (seq
            (basic-block
              (= (index r_b r_k) (const-int 0))
              (declaration (specifiers (type int)) r_l (initializer (const-int 0))))
            (seq
              (while
                (<= r_l (- (const-int 4) (const-int 1)))
                (basic-block
                  (= (index r_b r_k) (+ (index r_b r_k) (index (index r_a r_k) r_l)))
                  (= r_l (+ r_l (const-int 1)))))
              (basic-block
                (= (index r_s (const-int 0)) (+ (index r_s (const-int 0)) (index r_b r_k)))
                (= r_k (+ r_k (const-int 1)))))))
        (seq
          (basic-block
            (declaration (specifiers (type int)) r_i (initializer (const-int 1))))
          (while
            (<= r_i (- (const-int 6) (const-int 5)))
            (seq
              (basic-block
                (= (index r_b (- (+ r_i (const-int 5)) (const-int 1))) (const-int 0))
                (declaration (specifiers (type int)) r_l (initializer (const-int 0))))
              (seq
                (while
                  (<= r_l (- (const-int 4) (const-int 1)))
                  (basic-block
                    (=
                      (index r_b (- (+ r_i (const-int 5)) (const-int 1)))
                      (+
                        (index r_b (- (+ r_i (const-int 5)) (const-int 1)))
                        (index (index r_a (- (+ r_i (const-int 5)) (const-int 1))) r_l)))
                    (= r_l (+ r_l (const-int 1)))))
                (basic-block
                  (declaration
                    (specifiers (type int))
                    r_z
                    (initializer
                      (-
                        (index r_b (- (+ r_i (const-int 5)) (const-int 1)))
                        (index r_b (- r_i (const-int 1))))))
                  (= (index r_s r_i) (+ (index r_s (- r_i (const-int 1))) r_z))
                  (= r_i (+ r_i (const-int 1))))))))))))
--------------------------
Treating naive product as final alignment.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (const-int 6) (const-int 4))))
    (param-declaration
      (specifiers (type int))
      (sized-array
        l_s
        (array-sizes (+ (- (const-int 6) (const-int 5)) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (const-int 6) (const-int 4))))
    (param-declaration
      (specifiers (type int))
      (sized-array
        r_s
        (array-sizes (+ (- (const-int 6) (const-int 5)) (const-int 1))))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (< l_i (- (const-int 6) (const-int 5)))
        (seq
          (basic-block
            (= (index l_s l_i) (const-int 0))
            (declaration (specifiers (type int)) l_k (initializer (const-int 0))))
          (while
            (<= l_k (- (const-int 5) (const-int 1)))
            (seq
              (basic-block
                (declaration (specifiers (type int)) l_l (initializer (const-int 0))))
              (while
                (<= l_l (- (const-int 4) (const-int 1)))
                (basic-block
                  (= (index l_s l_i) (+ (index l_s l_i) (index (index l_a (+ l_i l_k)) l_l)))
                  (= l_l (+ l_l (const-int 1))))))))))
    (seq
      (basic-block
        (= (index r_s (const-int 0)) (const-int 0))
        (declaration
          (specifiers (type int))
          (sized-array r_b (array-sizes (const-int 6)))
          no-initializer)
        (declaration (specifiers (type int)) r_k (initializer (const-int 0))))
      (seq
        (while
          (<= r_k (- (const-int 5) (const-int 1)))
          (seq
            (basic-block
              (= (index r_b r_k) (const-int 0))
              (declaration (specifiers (type int)) r_l (initializer (const-int 0))))
            (seq
              (while
                (<= r_l (- (const-int 4) (const-int 1)))
                (basic-block
                  (= (index r_b r_k) (+ (index r_b r_k) (index (index r_a r_k) r_l)))
                  (= r_l (+ r_l (const-int 1)))))
              (basic-block
                (= (index r_s (const-int 0)) (+ (index r_s (const-int 0)) (index r_b r_k)))
                (= r_k (+ r_k (const-int 1)))))))
        (seq
          (basic-block
            (declaration (specifiers (type int)) r_i (initializer (const-int 1))))
          (while
            (<= r_i (- (const-int 6) (const-int 5)))
            (seq
              (basic-block
                (= (index r_b (- (+ r_i (const-int 5)) (const-int 1))) (const-int 0))
                (declaration (specifiers (type int)) r_l (initializer (const-int 0))))
              (seq
                (while
                  (<= r_l (- (const-int 4) (const-int 1)))
                  (basic-block
                    (=
                      (index r_b (- (+ r_i (const-int 5)) (const-int 1)))
                      (+
                        (index r_b (- (+ r_i (const-int 5)) (const-int 1)))
                        (index (index r_a (- (+ r_i (const-int 5)) (const-int 1))) r_l)))
                    (= r_l (+ r_l (const-int 1)))))
                (basic-block
                  (declaration
                    (specifiers (type int))
                    r_z
                    (initializer
                      (-
                        (index r_b (- (+ r_i (const-int 5)) (const-int 1)))
                        (index r_b (- r_i (const-int 1))))))
                  (= (index r_s r_i) (+ (index r_s (- r_i (const-int 1))) r_z))
                  (= r_i (+ r_i (const-int 1))))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "assert.h"

void main() {
  int l_a[6][4];
  int l_s[(6 - 5) + 1];
  int r_a[6][4];
  int r_s[(6 - 5) + 1];
  int _i = 0;
  while (_i < 24) {
    __VERIFIER_assume(l_a[_i] == r_a[_i]);
    _i = (_i + 1);
  }
  int _i2 = 0;
  while (_i2 < 2) {
    __VERIFIER_assume(l_s[_i2] == r_s[_i2]);
    _i2 = (_i2 + 1);
  }
  int l_i = 0;
  while (l_i < (6 - 5)) {
    l_s[l_i] = 0;
    int l_k = 0;
    while (l_k <= (5 - 1)) {
      int l_l = 0;
      while (l_l <= (4 - 1)) {
        l_s[l_i] = (l_s[l_i] + l_a[l_i + l_k][l_l]);
        l_l = (l_l + 1);
      }
    }
  }
  r_s[0] = 0;
  int r_b[6];
  int r_k = 0;
  while (r_k <= (5 - 1)) {
    r_b[r_k] = 0;
    int r_l = 0;
    while (r_l <= (4 - 1)) {
      r_b[r_k] = (r_b[r_k] + r_a[r_k][r_l]);
      r_l = (r_l + 1);
    }
    r_s[0] = (r_s[0] + r_b[r_k]);
    r_k = (r_k + 1);
  }
  int r_i = 1;
  while (r_i <= (6 - 5)) {
    r_b[(r_i + 5) - 1] = 0;
    int r_l = 0;
    while (r_l <= (4 - 1)) {
      r_b[(r_i + 5) - 1] = (r_b[(r_i + 5) - 1] + r_a[(r_i + 5) - 1][r_l]);
      r_l = (r_l + 1);
    }
    int r_z = r_b[(r_i + 5) - 1] - r_b[r_i - 1];
    r_s[r_i] = (r_s[r_i - 1] + r_z);
    r_i = (r_i + 1);
  }
  int _j = 0;
  while (_j < 6) {
    __VERIFIER_assert(l_s[_j] == r_s[_j]);
    _j = (_j + 1);
  }
 }

--------------------------
Writing output to ./results/alignments/barthe/unaligned/static-caching-una.c...
Done

real	0m0.027s
user	0m0.017s
sys	0m0.010s
