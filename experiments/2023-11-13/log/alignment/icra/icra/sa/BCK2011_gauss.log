
Unaligned Product Program
--------------------------

void main(int l_n, int r_n) {
  int l_x = 0;
  int l_i = 0;
  while (l_i <= l_n) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  int r_y = 0;
  int r_j = 1;
  while (r_j <= r_n) {
    r_y = (r_y + r_j);
    r_j = (r_j + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_n))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (<= l_i l_n)
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_j (initializer (const-int 1))))
      (while
        (<= r_j r_n)
        (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))))))
--------------------------

Pre-SA Initial Alignment
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_n))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_j (initializer (const-int 1)))))
    (while-lockstep
      0
      0
      (<= l_i l_n)
      (<= r_j r_n)
      (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
      (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))
      (<|>
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))))))
--------------------------
Starting simulated annealing...
Initial score: 0.846673
Score 0.8262677 at temperature 1
Score 0.7650142 at temperature 0.9999167
Score 0.70666665 at temperature 0.99983335
Simulated annealing complete.
Saw 135 configurations
Best score: 0.70666665

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_n))
  (seq
    (|>
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_j (initializer (const-int 1)))))
    (seq
      (<|
        (basic-block
          (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_i (initializer (const-int 0)))))
      (while-lockstep
        1
        0
        (<= l_i l_n)
        (<= r_j r_n)
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))
        (seq
          (<| (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1)))))
          (|> (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "assert.h"

void main() {
  int l_n = nondet();
  int r_n = nondet();
  __VERIFIER_assume((l_n == r_n) && ((l_n > 0) && (l_n < 100000)));
  int r_y = 0;
  int r_j = 1;
  int l_x = 0;
  int l_i = 0;
  if (l_i <= l_n) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while ((l_i <= l_n) && (r_j <= r_n)) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
    r_y = (r_y + r_j);
    r_j = (r_j + 1);
  }
  while (l_i <= l_n) {
    __VERIFIER_assume(!(r_j <= r_n));
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while (r_j <= r_n) {
    __VERIFIER_assume(!(l_i <= l_n));
    r_y = (r_y + r_j);
    r_j = (r_j + 1);
  }
  __VERIFIER_assert(l_x == r_y);
 }

--------------------------
Writing output to ./results/alignments/icra/sa/BCK2011_gauss-sa.c...
Done

real	0m2.046s
user	0m2.034s
sys	0m0.010s
