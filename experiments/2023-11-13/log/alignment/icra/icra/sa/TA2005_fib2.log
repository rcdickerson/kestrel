
Unaligned Product Program
--------------------------

void main(int l_f11, int l_f12, int l_n1, int l_l1, int l_x1, int l_i1, int l_h1, int r_f21, int r_f22, int r_n2, int r_l2, int r_x2, int r_i2, int r_h2) {
  while (l_n1 > 0) {
    l_f11 = (l_f11 + l_f12);
    l_f12 = (l_f11 - l_f12);
    l_n1 = (l_n1 - 1);
  }
  if (l_h1) {
    l_x1 = 1;
  }
  if (!l_h1) {
    l_x1 = 1;
  }
  while (l_i1 < l_f11) {
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
  }
  while (r_n2 > 0) {
    r_f21 = (r_f21 + r_f22);
    r_f22 = (r_f21 - r_f22);
    r_n2 = (r_n2 - 1);
  }
  if (r_h2) {
    r_x2 = 1;
  }
  if (!r_h2) {
    r_x2 = 1;
  }
  while (r_i2 < r_f21) {
    r_l2 = (r_l2 + r_x2);
    r_i2 = (r_i2 + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_f11)
    (param-declaration (specifiers (type int)) l_f12)
    (param-declaration (specifiers (type int)) l_n1)
    (param-declaration (specifiers (type int)) l_l1)
    (param-declaration (specifiers (type int)) l_x1)
    (param-declaration (specifiers (type int)) l_i1)
    (param-declaration (specifiers (type int)) l_h1)
    (param-declaration (specifiers (type int)) r_f21)
    (param-declaration (specifiers (type int)) r_f22)
    (param-declaration (specifiers (type int)) r_n2)
    (param-declaration (specifiers (type int)) r_l2)
    (param-declaration (specifiers (type int)) r_x2)
    (param-declaration (specifiers (type int)) r_i2)
    (param-declaration (specifiers (type int)) r_h2))
  (<|>
    (seq
      (while
        (> l_n1 (const-int 0))
        (basic-block
          (= l_f11 (+ l_f11 l_f12))
          (= l_f12 (- l_f11 l_f12))
          (= l_n1 (- l_n1 (const-int 1)))))
      (seq
        (if l_h1 (basic-block (= l_x1 (const-int 1))))
        (seq
          (if (not l_h1) (basic-block (= l_x1 (const-int 1))))
          (while
            (< l_i1 l_f11)
            (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))))))
    (seq
      (while
        (> r_n2 (const-int 0))
        (basic-block
          (= r_f21 (+ r_f21 r_f22))
          (= r_f22 (- r_f21 r_f22))
          (= r_n2 (- r_n2 (const-int 1)))))
      (seq
        (if r_h2 (basic-block (= r_x2 (const-int 1))))
        (seq
          (if (not r_h2) (basic-block (= r_x2 (const-int 1))))
          (while
            (< r_i2 r_f21)
            (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1))))))))))
--------------------------

Pre-SA Initial Alignment
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_f11)
    (param-declaration (specifiers (type int)) l_f12)
    (param-declaration (specifiers (type int)) l_n1)
    (param-declaration (specifiers (type int)) l_l1)
    (param-declaration (specifiers (type int)) l_x1)
    (param-declaration (specifiers (type int)) l_i1)
    (param-declaration (specifiers (type int)) l_h1)
    (param-declaration (specifiers (type int)) r_f21)
    (param-declaration (specifiers (type int)) r_f22)
    (param-declaration (specifiers (type int)) r_n2)
    (param-declaration (specifiers (type int)) r_l2)
    (param-declaration (specifiers (type int)) r_x2)
    (param-declaration (specifiers (type int)) r_i2)
    (param-declaration (specifiers (type int)) r_h2))
  (seq
    (seq
      (while-lockstep
        0
        0
        (> l_n1 (const-int 0))
        (> r_n2 (const-int 0))
        (basic-block
          (= l_f11 (+ l_f11 l_f12))
          (= l_f12 (- l_f11 l_f12))
          (= l_n1 (- l_n1 (const-int 1))))
        (basic-block
          (= r_f21 (+ r_f21 r_f22))
          (= r_f22 (- r_f21 r_f22))
          (= r_n2 (- r_n2 (const-int 1))))
        (<|>
          (basic-block
            (= l_f11 (+ l_f11 l_f12))
            (= l_f12 (- l_f11 l_f12))
            (= l_n1 (- l_n1 (const-int 1))))
          (basic-block
            (= r_f21 (+ r_f21 r_f22))
            (= r_f22 (- r_f21 r_f22))
            (= r_n2 (- r_n2 (const-int 1))))))
      (<|>
        (if l_h1 (basic-block (= l_x1 (const-int 1))))
        (if r_h2 (basic-block (= r_x2 (const-int 1))))))
    (seq
      (<|>
        (if (not l_h1) (basic-block (= l_x1 (const-int 1))))
        (if (not r_h2) (basic-block (= r_x2 (const-int 1)))))
      (while-lockstep
        0
        0
        (< l_i1 l_f11)
        (< r_i2 r_f21)
        (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))
        (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1))))
        (<|>
          (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))
          (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1)))))))))
--------------------------
Starting simulated annealing...
Initial score: 0.70676214
Score 0.69531935 at temperature 0.9996667
Score 0.67950374 at temperature 0.9990001
Score 0.6789893 at temperature 0.9981668
Score 0.6695221 at temperature 0.9968336
Score 0.66912913 at temperature 0.9951671
Simulated annealing complete.
Saw 2021 configurations
Best score: 0.66912913

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_f11)
    (param-declaration (specifiers (type int)) l_f12)
    (param-declaration (specifiers (type int)) l_n1)
    (param-declaration (specifiers (type int)) l_l1)
    (param-declaration (specifiers (type int)) l_x1)
    (param-declaration (specifiers (type int)) l_i1)
    (param-declaration (specifiers (type int)) l_h1)
    (param-declaration (specifiers (type int)) r_f21)
    (param-declaration (specifiers (type int)) r_f22)
    (param-declaration (specifiers (type int)) r_n2)
    (param-declaration (specifiers (type int)) r_l2)
    (param-declaration (specifiers (type int)) r_x2)
    (param-declaration (specifiers (type int)) r_i2)
    (param-declaration (specifiers (type int)) r_h2))
  (seq
    (while-lockstep
      0
      0
      (> l_n1 (const-int 0))
      (> r_n2 (const-int 0))
      (basic-block
        (= l_f11 (+ l_f11 l_f12))
        (= l_f12 (- l_f11 l_f12))
        (= l_n1 (- l_n1 (const-int 1))))
      (basic-block
        (= r_f21 (+ r_f21 r_f22))
        (= r_f22 (- r_f21 r_f22))
        (= r_n2 (- r_n2 (const-int 1))))
      (seq
        (|>
          (basic-block
            (= r_f21 (+ r_f21 r_f22))
            (= r_f22 (- r_f21 r_f22))
            (= r_n2 (- r_n2 (const-int 1)))))
        (<|
          (basic-block
            (= l_f11 (+ l_f11 l_f12))
            (= l_f12 (- l_f11 l_f12))
            (= l_n1 (- l_n1 (const-int 1)))))))
    (seq
      (seq
        (seq
          (<| (if l_h1 (basic-block (= l_x1 (const-int 1)))))
          (|> (if r_h2 (basic-block (= r_x2 (const-int 1))))))
        (|> (if (not r_h2) (basic-block (= r_x2 (const-int 1))))))
      (seq
        (<| (if (not l_h1) (basic-block (= l_x1 (const-int 1)))))
        (while-lockstep
          1
          0
          (< l_i1 l_f11)
          (< r_i2 r_f21)
          (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))
          (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1))))
          (seq
            (|> (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1)))))
            (<| (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1)))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "assert.h"

void main() {
  int l_f11 = nondet();
  int l_f12 = nondet();
  int l_n1 = nondet();
  int l_l1 = nondet();
  int l_x1 = nondet();
  int l_i1 = nondet();
  int l_h1 = nondet();
  int r_f21 = nondet();
  int r_f22 = nondet();
  int r_n2 = nondet();
  int r_l2 = nondet();
  int r_x2 = nondet();
  int r_i2 = nondet();
  int r_h2 = nondet();
  __VERIFIER_assume((l_f11 == r_f21) && ((l_f12 == r_f22) && ((l_n1 == r_n2) && ((l_l1 == r_l2) && ((l_x1 == r_x2) && (l_i1 == r_i2))))));
  while ((l_n1 > 0) && (r_n2 > 0)) {
    r_f21 = (r_f21 + r_f22);
    r_f22 = (r_f21 - r_f22);
    r_n2 = (r_n2 - 1);
    l_f11 = (l_f11 + l_f12);
    l_f12 = (l_f11 - l_f12);
    l_n1 = (l_n1 - 1);
  }
  while (l_n1 > 0) {
    __VERIFIER_assume(!(r_n2 > 0));
    l_f11 = (l_f11 + l_f12);
    l_f12 = (l_f11 - l_f12);
    l_n1 = (l_n1 - 1);
  }
  while (r_n2 > 0) {
    __VERIFIER_assume(!(l_n1 > 0));
    r_f21 = (r_f21 + r_f22);
    r_f22 = (r_f21 - r_f22);
    r_n2 = (r_n2 - 1);
  }
  if (l_h1) {
    l_x1 = 1;
  }
  if (r_h2) {
    r_x2 = 1;
  }
  if (!r_h2) {
    r_x2 = 1;
  }
  if (!l_h1) {
    l_x1 = 1;
  }
  if (l_i1 < l_f11) {
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
  }
  while ((l_i1 < l_f11) && (r_i2 < r_f21)) {
    r_l2 = (r_l2 + r_x2);
    r_i2 = (r_i2 + 1);
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
  }
  while (l_i1 < l_f11) {
    __VERIFIER_assume(!(r_i2 < r_f21));
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
  }
  while (r_i2 < r_f21) {
    __VERIFIER_assume(!(l_i1 < l_f11));
    r_l2 = (r_l2 + r_x2);
    r_i2 = (r_i2 + 1);
  }
  __VERIFIER_assert(l_l1 == r_l2);
 }

--------------------------
Writing output to ./results/alignments/icra/sa/TA2005_fib2-sa.c...
Done

real	0m30.538s
user	0m30.472s
sys	0m0.034s
