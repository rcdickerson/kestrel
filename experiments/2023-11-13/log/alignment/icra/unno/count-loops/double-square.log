
Unaligned Product Program
--------------------------

void main(int l_x, int r_x) {
  int l_z = 0;
  int l_y = 0;
  l_z = (2 * l_x);
  while (l_z > 0) {
    l_z = (l_z - 1);
    l_y = (l_y + l_x);
  }
  int r_z = 0;
  int r_y = 0;
  r_z = r_x;
  while (r_z > 0) {
    r_z = (r_z - 1);
    r_y = (r_y + r_x);
  }
  r_y = (2 * r_y);
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) r_x))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_z (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
        (= l_z (* (const-int 2) l_x)))
      (while
        (> l_z (const-int 0))
        (basic-block (= l_z (- l_z (const-int 1))) (= l_y (+ l_y l_x)))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_z (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (= r_z r_x))
      (seq
        (while
          (> r_z (const-int 0))
          (basic-block (= r_z (- r_z (const-int 1))) (= r_y (+ r_y r_x))))
        (basic-block (= r_y (* (const-int 2) r_y)))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) r_x))
  (seq
    (seq
      (<|>
        (basic-block
          (declaration (specifiers (type int)) l_z (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
          (= l_z (* (const-int 2) l_x)))
        (basic-block
          (declaration (specifiers (type int)) r_z (initializer (const-int 0)))
          (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
          (= r_z r_x)))
      (while-lockstep
        0
        0
        (> l_z (const-int 0))
        (> r_z (const-int 0))
        (basic-block (= l_z (- l_z (const-int 1))) (= l_y (+ l_y l_x)))
        (basic-block (= r_z (- r_z (const-int 1))) (= r_y (+ r_y r_x)))
        (<|>
          (basic-block (= l_z (- l_z (const-int 1))) (= l_y (+ l_y l_x)))
          (basic-block (= r_z (- r_z (const-int 1))) (= r_y (+ r_y r_x))))))
    (|> (basic-block (= r_y (* (const-int 2) r_y))))))
--------------------------

Aligned Product Program
--------------------------
#include "assert.h"

void main() {
  int l_x = nondet();
  int r_x = nondet();
  __VERIFIER_assume(l_x == r_x);
  int l_z = 0;
  int l_y = 0;
  l_z = (2 * l_x);
  int r_z = 0;
  int r_y = 0;
  r_z = r_x;
  while ((l_z > 0) && (r_z > 0)) {
    l_z = (l_z - 1);
    l_y = (l_y + l_x);
    r_z = (r_z - 1);
    r_y = (r_y + r_x);
  }
  while (l_z > 0) {
    __VERIFIER_assume(!(r_z > 0));
    l_z = (l_z - 1);
    l_y = (l_y + l_x);
  }
  while (r_z > 0) {
    __VERIFIER_assume(!(l_z > 0));
    r_z = (r_z - 1);
    r_y = (r_y + r_x);
  }
  r_y = (2 * r_y);
  __VERIFIER_assert(l_y == r_y);
 }

--------------------------
Writing output to ./results/alignments/unno/count-loops/double-square-cou.c...
Done

real	0m0.026s
user	0m0.020s
sys	0m0.006s
