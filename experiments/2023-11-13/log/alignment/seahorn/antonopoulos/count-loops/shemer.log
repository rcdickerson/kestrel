
Unaligned Product Program
--------------------------

void main(int l_x, int r_x) {
  int l_y = 0;
  int l_z = 2 * l_x;
  int l_i = 0;
  while (l_i < l_z) {
    l_y = (l_y + l_x);
    l_i = (l_i + 1);
  }
  int r_y = 0;
  int r_z = r_x;
  int r_i = 0;
  while (r_i < r_z) {
    r_y = (r_y + r_x);
    r_i = (r_i + 1);
  }
  r_y = (r_y * 2);
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) r_x))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_z (initializer (* (const-int 2) l_x)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (< l_i l_z)
        (basic-block (= l_y (+ l_y l_x)) (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_z (initializer r_x))
        (declaration (specifiers (type int)) r_i (initializer (const-int 0))))
      (seq
        (while
          (< r_i r_z)
          (basic-block (= r_y (+ r_y r_x)) (= r_i (+ r_i (const-int 1)))))
        (basic-block (= r_y (* r_y (const-int 2))))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) r_x))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_z (initializer (* (const-int 2) l_x)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_z (initializer r_x))
        (declaration (specifiers (type int)) r_i (initializer (const-int 0)))))
    (seq
      (while-lockstep
        0
        0
        (< l_i l_z)
        (< r_i r_z)
        (basic-block (= l_y (+ l_y l_x)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_y (+ r_y r_x)) (= r_i (+ r_i (const-int 1))))
        (<|>
          (basic-block (= l_y (+ l_y l_x)) (= l_i (+ l_i (const-int 1))))
          (basic-block (= r_y (+ r_y r_x)) (= r_i (+ r_i (const-int 1))))))
      (|> (basic-block (= r_y (* r_y (const-int 2))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_x = arb_int();
  int r_x = arb_int();
  assume(l_x == r_x);
  int l_y = 0;
  int l_z = 2 * l_x;
  int l_i = 0;
  int r_y = 0;
  int r_z = r_x;
  int r_i = 0;
  while ((l_i < l_z) && (r_i < r_z)) {
    l_y = (l_y + l_x);
    l_i = (l_i + 1);
    r_y = (r_y + r_x);
    r_i = (r_i + 1);
  }
  while (l_i < l_z) {
    assume(!(r_i < r_z));
    l_y = (l_y + l_x);
    l_i = (l_i + 1);
  }
  while (r_i < r_z) {
    assume(!(l_i < l_z));
    r_y = (r_y + r_x);
    r_i = (r_i + 1);
  }
  r_y = (r_y * 2);
  sassert(l_y == r_y);
 }

--------------------------
Writing output to ./results/alignments/antonopoulos/count-loops/shemer-cou.c...
Done

real	0m0.026s
user	0m0.023s
sys	0m0.003s
