
Unaligned Product Program
--------------------------

void main(float l_a[10], float r_a[10]) {
  int l_i = 0;
  while (l_i < 10) {
    int l_j = 10 - 1;
    while (l_j > l_i) {
      if (l_a[l_j - 1] > l_a[l_j]) {
        float l_temp = l_a[l_j];
        l_a[l_j] = l_a[l_j - 1];
        l_a[l_j - 1] = l_temp;
      }
      l_j = (l_j - 1);
    }
    l_i = (l_i + 1);
  }
  int r_i = 0;
  while (r_i < 10) {
    int r_j = 10 - 1;
    while (r_j > r_i) {
      if (r_a[r_j - 1] > r_a[r_j]) {
        float r_temp = r_a[r_j];
        r_a[r_j] = r_a[r_j - 1];
        r_a[r_j - 1] = r_temp;
      }
      r_j = (r_j - 1);
    }
    r_i = (r_i + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type float))
      (sized-array l_a (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array r_a (array-sizes (const-int 10)))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (< l_i (const-int 10))
        (seq
          (basic-block
            (declaration
              (specifiers (type int))
              l_j
              (initializer (- (const-int 10) (const-int 1)))))
          (seq
            (while
              (> l_j l_i)
              (seq
                (if
                  (> (index l_a (- l_j (const-int 1))) (index l_a l_j))
                  (basic-block
                    (declaration (specifiers (type float)) l_temp (initializer (index l_a l_j)))
                    (= (index l_a l_j) (index l_a (- l_j (const-int 1))))
                    (= (index l_a (- l_j (const-int 1))) l_temp)))
                (basic-block (= l_j (- l_j (const-int 1))))))
            (basic-block (= l_i (+ l_i (const-int 1))))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_i (initializer (const-int 0))))
      (while
        (< r_i (const-int 10))
        (seq
          (basic-block
            (declaration
              (specifiers (type int))
              r_j
              (initializer (- (const-int 10) (const-int 1)))))
          (seq
            (while
              (> r_j r_i)
              (seq
                (if
                  (> (index r_a (- r_j (const-int 1))) (index r_a r_j))
                  (basic-block
                    (declaration (specifiers (type float)) r_temp (initializer (index r_a r_j)))
                    (= (index r_a r_j) (index r_a (- r_j (const-int 1))))
                    (= (index r_a (- r_j (const-int 1))) r_temp)))
                (basic-block (= r_j (- r_j (const-int 1))))))
            (basic-block (= r_i (+ r_i (const-int 1))))))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type float))
      (sized-array l_a (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array r_a (array-sizes (const-int 10)))))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_i (initializer (const-int 0)))))
    (while-lockstep
      0
      0
      (< l_i (const-int 10))
      (< r_i (const-int 10))
      (seq
        (basic-block
          (declaration
            (specifiers (type int))
            l_j
            (initializer (- (const-int 10) (const-int 1)))))
        (seq
          (while
            (> l_j l_i)
            (seq
              (if
                (> (index l_a (- l_j (const-int 1))) (index l_a l_j))
                (basic-block
                  (declaration (specifiers (type float)) l_temp (initializer (index l_a l_j)))
                  (= (index l_a l_j) (index l_a (- l_j (const-int 1))))
                  (= (index l_a (- l_j (const-int 1))) l_temp)))
              (basic-block (= l_j (- l_j (const-int 1))))))
          (basic-block (= l_i (+ l_i (const-int 1))))))
      (seq
        (basic-block
          (declaration
            (specifiers (type int))
            r_j
            (initializer (- (const-int 10) (const-int 1)))))
        (seq
          (while
            (> r_j r_i)
            (seq
              (if
                (> (index r_a (- r_j (const-int 1))) (index r_a r_j))
                (basic-block
                  (declaration (specifiers (type float)) r_temp (initializer (index r_a r_j)))
                  (= (index r_a r_j) (index r_a (- r_j (const-int 1))))
                  (= (index r_a (- r_j (const-int 1))) r_temp)))
              (basic-block (= r_j (- r_j (const-int 1))))))
          (basic-block (= r_i (+ r_i (const-int 1))))))
      (seq
        (seq
          (<|>
            (basic-block
              (declaration
                (specifiers (type int))
                l_j
                (initializer (- (const-int 10) (const-int 1)))))
            (basic-block
              (declaration
                (specifiers (type int))
                r_j
                (initializer (- (const-int 10) (const-int 1))))))
          (while-lockstep
            0
            0
            (> l_j l_i)
            (> r_j r_i)
            (seq
              (if
                (> (index l_a (- l_j (const-int 1))) (index l_a l_j))
                (basic-block
                  (declaration (specifiers (type float)) l_temp (initializer (index l_a l_j)))
                  (= (index l_a l_j) (index l_a (- l_j (const-int 1))))
                  (= (index l_a (- l_j (const-int 1))) l_temp)))
              (basic-block (= l_j (- l_j (const-int 1)))))
            (seq
              (if
                (> (index r_a (- r_j (const-int 1))) (index r_a r_j))
                (basic-block
                  (declaration (specifiers (type float)) r_temp (initializer (index r_a r_j)))
                  (= (index r_a r_j) (index r_a (- r_j (const-int 1))))
                  (= (index r_a (- r_j (const-int 1))) r_temp)))
              (basic-block (= r_j (- r_j (const-int 1)))))
            (seq
              (<|>
                (if
                  (> (index l_a (- l_j (const-int 1))) (index l_a l_j))
                  (basic-block
                    (declaration (specifiers (type float)) l_temp (initializer (index l_a l_j)))
                    (= (index l_a l_j) (index l_a (- l_j (const-int 1))))
                    (= (index l_a (- l_j (const-int 1))) l_temp)))
                (if
                  (> (index r_a (- r_j (const-int 1))) (index r_a r_j))
                  (basic-block
                    (declaration (specifiers (type float)) r_temp (initializer (index r_a r_j)))
                    (= (index r_a r_j) (index r_a (- r_j (const-int 1))))
                    (= (index r_a (- r_j (const-int 1))) r_temp))))
              (<|>
                (basic-block (= l_j (- l_j (const-int 1))))
                (basic-block (= r_j (- r_j (const-int 1))))))))
        (<|>
          (basic-block (= l_i (+ l_i (const-int 1))))
          (basic-block (= r_i (+ r_i (const-int 1)))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();
const float epsilon = 0.01;

void main() {
  float l_a[10];
  float r_a[10];
  int _i = 1;
  while (_i < 10) {
    assume(((l_a[_i] >= r_a[_i]) || ((r_a[_i] - l_a[_i]) < epsilon)) && ((l_a[_i] < r_a[_i]) || ((l_a[_i] - r_a[_i]) < epsilon)));
    _i = (_i + 1);
  }
  int l_i = 0;
  int r_i = 0;
  while ((l_i < 10) && (r_i < 10)) {
    int l_j = 10 - 1;
    int r_j = 10 - 1;
    while ((l_j > l_i) && (r_j > r_i)) {
      if (l_a[l_j - 1] > l_a[l_j]) {
        float l_temp = l_a[l_j];
        l_a[l_j] = l_a[l_j - 1];
        l_a[l_j - 1] = l_temp;
      }
      if (r_a[r_j - 1] > r_a[r_j]) {
        float r_temp = r_a[r_j];
        r_a[r_j] = r_a[r_j - 1];
        r_a[r_j - 1] = r_temp;
      }
      l_j = (l_j - 1);
      r_j = (r_j - 1);
    }
    while (l_j > l_i) {
      assume(!(r_j > r_i));
      if (l_a[l_j - 1] > l_a[l_j]) {
        float l_temp = l_a[l_j];
        l_a[l_j] = l_a[l_j - 1];
        l_a[l_j - 1] = l_temp;
      }
      l_j = (l_j - 1);
    }
    while (r_j > r_i) {
      assume(!(l_j > l_i));
      if (r_a[r_j - 1] > r_a[r_j]) {
        float r_temp = r_a[r_j];
        r_a[r_j] = r_a[r_j - 1];
        r_a[r_j - 1] = r_temp;
      }
      r_j = (r_j - 1);
    }
    l_i = (l_i + 1);
    r_i = (r_i + 1);
  }
  while (l_i < 10) {
    assume(!(r_i < 10));
    int l_j = 10 - 1;
    while (l_j > l_i) {
      if (l_a[l_j - 1] > l_a[l_j]) {
        float l_temp = l_a[l_j];
        l_a[l_j] = l_a[l_j - 1];
        l_a[l_j - 1] = l_temp;
      }
      l_j = (l_j - 1);
    }
    l_i = (l_i + 1);
  }
  while (r_i < 10) {
    assume(!(l_i < 10));
    int r_j = 10 - 1;
    while (r_j > r_i) {
      if (r_a[r_j - 1] > r_a[r_j]) {
        float r_temp = r_a[r_j];
        r_a[r_j] = r_a[r_j - 1];
        r_a[r_j - 1] = r_temp;
      }
      r_j = (r_j - 1);
    }
    r_i = (r_i + 1);
  }
  int _j = 1;
  while (_j < 10) {
    sassert(((l_a[_j] >= r_a[_j]) || ((r_a[_j] - l_a[_j]) < epsilon)) && ((l_a[_j] < r_a[_j]) || ((l_a[_j] - r_a[_j]) < epsilon)));
    _j = (_j + 1);
  }
 }

--------------------------
Writing output to ./results/alignments/barthe/count-loops/bubblesort-cou.c...
Done

real	0m0.050s
user	0m0.043s
sys	0m0.007s
