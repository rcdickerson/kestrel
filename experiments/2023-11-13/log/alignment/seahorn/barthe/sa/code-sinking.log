
Unaligned Product Program
--------------------------

void main(int l_a[10 + 1], int r_a[10 + 1]) {
  int l_max = l_a[0];
  int l_maxi = 0;
  int l_i = 0;
  while (l_i < 10) {
    if (l_max < l_a[l_i]) {
      l_max = l_a[l_i];
      l_maxi = l_i;
    }
    l_i = (l_i + 1);
  }
  int l_t = l_a[10];
  l_a[10] = l_max;
  l_a[l_maxi] = l_t;
  int r_j = 0;
  int r_max;
  int r_maxi;
  while (r_j < 10) {
    if (r_j == 0) {
      r_max = r_a[0];
      r_maxi = 0;
    }
    if (r_max < r_a[r_j]) {
      r_max = r_a[r_j];
      r_maxi = r_j;
    }
    if (r_j == 10) {
      int r_t = r_a[10];
      r_a[10] = r_max;
      r_a[r_maxi] = r_t;
    }
    r_j = (r_j + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (+ (const-int 10) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (+ (const-int 10) (const-int 1))))))
  (<|>
    (seq
      (basic-block
        (declaration
          (specifiers (type int))
          l_max
          (initializer (index l_a (const-int 0))))
        (declaration (specifiers (type int)) l_maxi (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (seq
        (while
          (< l_i (const-int 10))
          (seq
            (if
              (< l_max (index l_a l_i))
              (basic-block (= l_max (index l_a l_i)) (= l_maxi l_i)))
            (basic-block (= l_i (+ l_i (const-int 1))))))
        (basic-block
          (declaration
            (specifiers (type int))
            l_t
            (initializer (index l_a (const-int 10))))
          (= (index l_a (const-int 10)) l_max)
          (= (index l_a l_maxi) l_t))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_j (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_max no-initializer)
        (declaration (specifiers (type int)) r_maxi no-initializer))
      (while
        (< r_j (const-int 10))
        (seq
          (if
            (== r_j (const-int 0))
            (basic-block (= r_max (index r_a (const-int 0))) (= r_maxi (const-int 0))))
          (seq
            (if
              (< r_max (index r_a r_j))
              (basic-block (= r_max (index r_a r_j)) (= r_maxi r_j)))
            (seq
              (if
                (== r_j (const-int 10))
                (basic-block
                  (declaration
                    (specifiers (type int))
                    r_t
                    (initializer (index r_a (const-int 10))))
                  (= (index r_a (const-int 10)) r_max)
                  (= (index r_a r_maxi) r_t)))
              (basic-block (= r_j (+ r_j (const-int 1)))))))))))
--------------------------

Pre-SA Initial Alignment
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (+ (const-int 10) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (+ (const-int 10) (const-int 1))))))
  (seq
    (seq
      (<|>
        (basic-block
          (declaration
            (specifiers (type int))
            l_max
            (initializer (index l_a (const-int 0))))
          (declaration (specifiers (type int)) l_maxi (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
        (basic-block
          (declaration (specifiers (type int)) r_j (initializer (const-int 0)))
          (declaration (specifiers (type int)) r_max no-initializer)
          (declaration (specifiers (type int)) r_maxi no-initializer)))
      (while-lockstep
        0
        0
        (< l_i (const-int 10))
        (< r_j (const-int 10))
        (seq
          (if
            (< l_max (index l_a l_i))
            (basic-block (= l_max (index l_a l_i)) (= l_maxi l_i)))
          (basic-block (= l_i (+ l_i (const-int 1)))))
        (seq
          (seq
            (if
              (== r_j (const-int 0))
              (basic-block (= r_max (index r_a (const-int 0))) (= r_maxi (const-int 0))))
            (if
              (< r_max (index r_a r_j))
              (basic-block (= r_max (index r_a r_j)) (= r_maxi r_j))))
          (seq
            (if
              (== r_j (const-int 10))
              (basic-block
                (declaration
                  (specifiers (type int))
                  r_t
                  (initializer (index r_a (const-int 10))))
                (= (index r_a (const-int 10)) r_max)
                (= (index r_a r_maxi) r_t)))
            (basic-block (= r_j (+ r_j (const-int 1))))))
        (seq
          (<|>
            (if
              (< l_max (index l_a l_i))
              (basic-block (= l_max (index l_a l_i)) (= l_maxi l_i)))
            (seq
              (if
                (== r_j (const-int 0))
                (basic-block (= r_max (index r_a (const-int 0))) (= r_maxi (const-int 0))))
              (if
                (< r_max (index r_a r_j))
                (basic-block (= r_max (index r_a r_j)) (= r_maxi r_j)))))
          (<|>
            (basic-block (= l_i (+ l_i (const-int 1))))
            (seq
              (if
                (== r_j (const-int 10))
                (basic-block
                  (declaration
                    (specifiers (type int))
                    r_t
                    (initializer (index r_a (const-int 10))))
                  (= (index r_a (const-int 10)) r_max)
                  (= (index r_a r_maxi) r_t)))
              (basic-block (= r_j (+ r_j (const-int 1)))))))))
    (<|
      (basic-block
        (declaration
          (specifiers (type int))
          l_t
          (initializer (index l_a (const-int 10))))
        (= (index l_a (const-int 10)) l_max)
        (= (index l_a l_maxi) l_t)))))
--------------------------
Starting simulated annealing...
Initial score: 0.5340909
Score 0.4933974 at temperature 0.9999167
Score 0.4745699 at temperature 0.9981668
Simulated annealing complete.
Saw 2005 configurations
Best score: 0.4745699

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (+ (const-int 10) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (+ (const-int 10) (const-int 1))))))
  (seq
    (seq
      (<|>
        (basic-block
          (declaration
            (specifiers (type int))
            l_max
            (initializer (index l_a (const-int 0))))
          (declaration (specifiers (type int)) l_maxi (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
        (basic-block
          (declaration (specifiers (type int)) r_j (initializer (const-int 0)))
          (declaration (specifiers (type int)) r_max no-initializer)
          (declaration (specifiers (type int)) r_maxi no-initializer)))
      (while-lockstep
        0
        0
        (< l_i (const-int 10))
        (< r_j (const-int 10))
        (seq
          (if
            (< l_max (index l_a l_i))
            (basic-block (= l_max (index l_a l_i)) (= l_maxi l_i)))
          (basic-block (= l_i (+ l_i (const-int 1)))))
        (seq
          (if
            (== r_j (const-int 0))
            (basic-block (= r_max (index r_a (const-int 0))) (= r_maxi (const-int 0))))
          (seq
            (seq
              (if
                (< r_max (index r_a r_j))
                (basic-block (= r_max (index r_a r_j)) (= r_maxi r_j)))
              (if
                (== r_j (const-int 10))
                (basic-block
                  (declaration
                    (specifiers (type int))
                    r_t
                    (initializer (index r_a (const-int 10))))
                  (= (index r_a (const-int 10)) r_max)
                  (= (index r_a r_maxi) r_t))))
            (basic-block (= r_j (+ r_j (const-int 1))))))
        (seq
          (seq
            (<|
              (if
                (< l_max (index l_a l_i))
                (basic-block (= l_max (index l_a l_i)) (= l_maxi l_i))))
            (<| (basic-block (= l_i (+ l_i (const-int 1))))))
          (seq
            (seq
              (|>
                (if
                  (== r_j (const-int 0))
                  (basic-block (= r_max (index r_a (const-int 0))) (= r_maxi (const-int 0)))))
              (seq
                (|>
                  (if
                    (< r_max (index r_a r_j))
                    (basic-block (= r_max (index r_a r_j)) (= r_maxi r_j))))
                (|>
                  (if
                    (== r_j (const-int 10))
                    (basic-block
                      (declaration
                        (specifiers (type int))
                        r_t
                        (initializer (index r_a (const-int 10))))
                      (= (index r_a (const-int 10)) r_max)
                      (= (index r_a r_maxi) r_t))))))
            (|> (basic-block (= r_j (+ r_j (const-int 1)))))))))
    (<|
      (basic-block
        (declaration
          (specifiers (type int))
          l_t
          (initializer (index l_a (const-int 10))))
        (= (index l_a (const-int 10)) l_max)
        (= (index l_a l_maxi) l_t)))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_a[10 + 1];
  int r_a[10 + 1];
  int _i = 0;
  while (_i < 11) {
    assume(l_a[_i] == r_a[_i]);
    _i = (_i + 1);
  }
  int l_max = l_a[0];
  int l_maxi = 0;
  int l_i = 0;
  int r_j = 0;
  int r_max;
  int r_maxi;
  while ((l_i < 10) && (r_j < 10)) {
    if (l_max < l_a[l_i]) {
      l_max = l_a[l_i];
      l_maxi = l_i;
    }
    l_i = (l_i + 1);
    if (r_j == 0) {
      r_max = r_a[0];
      r_maxi = 0;
    }
    if (r_max < r_a[r_j]) {
      r_max = r_a[r_j];
      r_maxi = r_j;
    }
    if (r_j == 10) {
      int r_t = r_a[10];
      r_a[10] = r_max;
      r_a[r_maxi] = r_t;
    }
    r_j = (r_j + 1);
  }
  while (l_i < 10) {
    assume(!(r_j < 10));
    if (l_max < l_a[l_i]) {
      l_max = l_a[l_i];
      l_maxi = l_i;
    }
    l_i = (l_i + 1);
  }
  while (r_j < 10) {
    assume(!(l_i < 10));
    if (r_j == 0) {
      r_max = r_a[0];
      r_maxi = 0;
    }
    if (r_max < r_a[r_j]) {
      r_max = r_a[r_j];
      r_maxi = r_j;
    }
    if (r_j == 10) {
      int r_t = r_a[10];
      r_a[10] = r_max;
      r_a[r_maxi] = r_t;
    }
    r_j = (r_j + 1);
  }
  int l_t = l_a[10];
  l_a[10] = l_max;
  l_a[l_maxi] = l_t;
  int _j = 0;
  while (_j < 11) {
    sassert(l_a[_j] == r_a[_j]);
    _j = (_j + 1);
  }
 }

--------------------------
Writing output to ./results/alignments/seahorn/barthe/sa/code-sinking-sa.c...
Done

real	0m9.857s
user	0m9.815s
sys	0m0.027s
