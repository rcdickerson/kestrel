
Unaligned Product Program
--------------------------

void main(int l_N, int r_N) {
  int l_x = 0;
  int l_i = 0;
  while (l_i <= l_N) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  int r_x = 0;
  int r_i = 1;
  while (r_i <= r_N) {
    r_x = (r_x + r_i);
    r_i = (r_i + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_N)
    (param-declaration (specifiers (type int)) r_N))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (<= l_i l_N)
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i (initializer (const-int 1))))
      (while
        (<= r_i r_N)
        (basic-block (= r_x (+ r_x r_i)) (= r_i (+ r_i (const-int 1))))))))
--------------------------

Pre-SA Initial Alignment
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_N)
    (param-declaration (specifiers (type int)) r_N))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i (initializer (const-int 1)))))
    (while-lockstep
      0
      0
      (<= l_i l_N)
      (<= r_i r_N)
      (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
      (basic-block (= r_x (+ r_x r_i)) (= r_i (+ r_i (const-int 1))))
      (<|>
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_x (+ r_x r_i)) (= r_i (+ r_i (const-int 1))))))))
--------------------------
Starting simulated annealing...
Initial score: 0.3753016
Score 0.34995666 at temperature 0.98975086
Score 0.33 at temperature 0.9867511
Score 0.29 at temperature 0.98216814
Simulated annealing complete.
Saw 135 configurations
Best score: 0.29

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_N)
    (param-declaration (specifiers (type int)) r_N))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i (initializer (const-int 1)))))
    (while-lockstep
      1
      0
      (<= l_i l_N)
      (<= r_i r_N)
      (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
      (basic-block (= r_x (+ r_x r_i)) (= r_i (+ r_i (const-int 1))))
      (<|>
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_x (+ r_x r_i)) (= r_i (+ r_i (const-int 1))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_N = arb_int();
  int r_N = arb_int();
  assume(l_N == r_N);
  int l_x = 0;
  int l_i = 0;
  int r_x = 0;
  int r_i = 1;
  if (l_i <= l_N) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while ((l_i <= l_N) && (r_i <= r_N)) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
    r_x = (r_x + r_i);
    r_i = (r_i + 1);
  }
  while (l_i <= l_N) {
    assume(!(r_i <= r_N));
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while (r_i <= r_N) {
    assume(!(l_i <= l_N));
    r_x = (r_x + r_i);
    r_i = (r_i + 1);
  }
  sassert(l_x == r_x);
 }

--------------------------
Writing output to ./results/alignments/barthe/sa/unroll-sa.c...
Done

real	0m1.865s
user	0m1.845s
sys	0m0.010s
