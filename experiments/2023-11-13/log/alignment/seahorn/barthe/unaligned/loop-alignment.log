
Unaligned Product Program
--------------------------

void main(int l_a[20 + 1], int l_b[20 + 1], int r_a[20 + 1], int r_b[20 + 1]) {
  int l_i = 1;
  int l_d[20 + 1];
  while (l_i <= 20) {
    l_b[l_i] = l_a[l_i];
    l_d[l_i] = l_b[l_i - 1];
    l_i = (l_i + 1);
  }
  int r_j = 1;
  int r_d[20 + 1];
  r_d[1] = r_b[0];
  while (r_j <= (20 - 1)) {
    r_b[r_j] = r_a[r_j];
    r_d[r_j + 1] = r_b[r_j];
    r_j = (r_j + 1);
  }
  r_b[20] = r_a[20];
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (+ (const-int 20) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array l_b (array-sizes (+ (const-int 20) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (+ (const-int 20) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_b (array-sizes (+ (const-int 20) (const-int 1))))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 1)))
        (declaration
          (specifiers (type int))
          (sized-array l_d (array-sizes (+ (const-int 20) (const-int 1))))
          no-initializer))
      (while
        (<= l_i (const-int 20))
        (basic-block
          (= (index l_b l_i) (index l_a l_i))
          (= (index l_d l_i) (index l_b (- l_i (const-int 1))))
          (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_j (initializer (const-int 1)))
        (declaration
          (specifiers (type int))
          (sized-array r_d (array-sizes (+ (const-int 20) (const-int 1))))
          no-initializer)
        (= (index r_d (const-int 1)) (index r_b (const-int 0))))
      (seq
        (while
          (<= r_j (- (const-int 20) (const-int 1)))
          (basic-block
            (= (index r_b r_j) (index r_a r_j))
            (= (index r_d (+ r_j (const-int 1))) (index r_b r_j))
            (= r_j (+ r_j (const-int 1)))))
        (basic-block (= (index r_b (const-int 20)) (index r_a (const-int 20))))))))
--------------------------
Treating naive product as final alignment.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type int))
      (sized-array l_a (array-sizes (+ (const-int 20) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array l_b (array-sizes (+ (const-int 20) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_a (array-sizes (+ (const-int 20) (const-int 1)))))
    (param-declaration
      (specifiers (type int))
      (sized-array r_b (array-sizes (+ (const-int 20) (const-int 1))))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 1)))
        (declaration
          (specifiers (type int))
          (sized-array l_d (array-sizes (+ (const-int 20) (const-int 1))))
          no-initializer))
      (while
        (<= l_i (const-int 20))
        (basic-block
          (= (index l_b l_i) (index l_a l_i))
          (= (index l_d l_i) (index l_b (- l_i (const-int 1))))
          (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_j (initializer (const-int 1)))
        (declaration
          (specifiers (type int))
          (sized-array r_d (array-sizes (+ (const-int 20) (const-int 1))))
          no-initializer)
        (= (index r_d (const-int 1)) (index r_b (const-int 0))))
      (seq
        (while
          (<= r_j (- (const-int 20) (const-int 1)))
          (basic-block
            (= (index r_b r_j) (index r_a r_j))
            (= (index r_d (+ r_j (const-int 1))) (index r_b r_j))
            (= r_j (+ r_j (const-int 1)))))
        (basic-block (= (index r_b (const-int 20)) (index r_a (const-int 20))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_a[20 + 1];
  int l_b[20 + 1];
  int r_a[20 + 1];
  int r_b[20 + 1];
  int _i = 0;
  while (_i < 20) {
    assume((l_a[_i] == r_a[_i]) && (l_b[0] == r_b[0]));
    _i = (_i + 1);
  }
  int l_i = 1;
  int l_d[20 + 1];
  while (l_i <= 20) {
    l_b[l_i] = l_a[l_i];
    l_d[l_i] = l_b[l_i - 1];
    l_i = (l_i + 1);
  }
  int r_j = 1;
  int r_d[20 + 1];
  r_d[1] = r_b[0];
  while (r_j <= (20 - 1)) {
    r_b[r_j] = r_a[r_j];
    r_d[r_j + 1] = r_b[r_j];
    r_j = (r_j + 1);
  }
  r_b[20] = r_a[20];
  int _j = 1;
  while (_j < 20) {
    sassert(l_d[_j] == r_d[_j]);
    _j = (_j + 1);
  }
 }

--------------------------
Writing output to ./results/alignments/barthe/unaligned/loop-alignment-una.c...
Done

real	0m0.026s
user	0m0.020s
sys	0m0.006s
