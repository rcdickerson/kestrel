
Unaligned Product Program
--------------------------

void main(int l_x, int l_n, int r_x, int r_n) {
  l_x = 0;
  int l_y = l_x;
  while (l_x <= l_n) {
    l_y = (l_y + l_f(l_y));
    l_x = (l_x + 1);
  }
  r_x = 0;
  int r_y = r_x;
  while (r_x <= r_n) {
    r_x = (r_x + 1);
    r_y = (r_y + r_f(r_y));
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_x)
    (param-declaration (specifiers (type int)) r_n))
  (<|>
    (seq
      (basic-block
        (= l_x (const-int 0))
        (declaration (specifiers (type int)) l_y (initializer l_x)))
      (while
        (<= l_x l_n)
        (basic-block
          (= l_y (+ l_y (call l_f (args l_y))))
          (= l_x (+ l_x (const-int 1))))))
    (seq
      (basic-block
        (= r_x (const-int 0))
        (declaration (specifiers (type int)) r_y (initializer r_x)))
      (while
        (<= r_x r_n)
        (basic-block
          (= r_x (+ r_x (const-int 1)))
          (= r_y (+ r_y (call r_f (args r_y)))))))))
--------------------------

Pre-SA Initial Alignment
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_x)
    (param-declaration (specifiers (type int)) r_n))
  (seq
    (<|>
      (basic-block
        (= l_x (const-int 0))
        (declaration (specifiers (type int)) l_y (initializer l_x)))
      (basic-block
        (= r_x (const-int 0))
        (declaration (specifiers (type int)) r_y (initializer r_x))))
    (while-lockstep
      0
      0
      (<= l_x l_n)
      (<= r_x r_n)
      (basic-block
        (= l_y (+ l_y (call l_f (args l_y))))
        (= l_x (+ l_x (const-int 1))))
      (basic-block
        (= r_x (+ r_x (const-int 1)))
        (= r_y (+ r_y (call r_f (args r_y)))))
      (<|>
        (basic-block
          (= l_y (+ l_y (call l_f (args l_y))))
          (= l_x (+ l_x (const-int 1))))
        (basic-block
          (= r_x (+ r_x (const-int 1)))
          (= r_y (+ r_y (call r_f (args r_y)))))))))
--------------------------
Starting simulated annealing...
Initial score: 0.14383622
Simulated annealing complete.
Saw 135 configurations
Best score: 0.14383622

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_x)
    (param-declaration (specifiers (type int)) r_n))
  (seq
    (<|>
      (basic-block
        (= l_x (const-int 0))
        (declaration (specifiers (type int)) l_y (initializer l_x)))
      (basic-block
        (= r_x (const-int 0))
        (declaration (specifiers (type int)) r_y (initializer r_x))))
    (while-lockstep
      0
      0
      (<= l_x l_n)
      (<= r_x r_n)
      (basic-block
        (= l_y (+ l_y (call l_f (args l_y))))
        (= l_x (+ l_x (const-int 1))))
      (basic-block
        (= r_x (+ r_x (const-int 1)))
        (= r_y (+ r_y (call r_f (args r_y)))))
      (<|>
        (basic-block
          (= l_y (+ l_y (call l_f (args l_y))))
          (= l_x (+ l_x (const-int 1))))
        (basic-block
          (= r_x (+ r_x (const-int 1)))
          (= r_y (+ r_y (call r_f (args r_y)))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_x = arb_int();
  int l_n = arb_int();
  int r_x = arb_int();
  int r_n = arb_int();
  assume((l_x == r_x) && (l_n == r_n));
  l_x = 0;
  int l_y = l_x;
  r_x = 0;
  int r_y = r_x;
  while ((l_x <= l_n) && (r_x <= r_n)) {
    l_y = (l_y + l_f(l_y));
    l_x = (l_x + 1);
    r_x = (r_x + 1);
    r_y = (r_y + r_f(r_y));
  }
  while (l_x <= l_n) {
    assume(!(r_x <= r_n));
    l_y = (l_y + l_f(l_y));
    l_x = (l_x + 1);
  }
  while (r_x <= r_n) {
    assume(!(l_x <= l_n));
    r_x = (r_x + 1);
    r_y = (r_y + r_f(r_y));
  }
  sassert(l_y == r_y);
 }

--------------------------
Writing output to ./results/alignments/euf/sa/test-sa.c...
Done

real	0m1.586s
user	0m1.574s
sys	0m0.010s
