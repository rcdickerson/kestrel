
Unaligned Product Program
--------------------------

void main(int l_high, int l_low, int r_high, int r_low) {
  int l_tick = 0;
  int l_i;
  if (l_low > 0) {
    l_i = 0;
    while (l_i < l_low) {
      l_i = (l_i + 1);
      l_tick = (l_tick + 1);
    }
    while (l_i > 0) {
      l_i = (l_i - 1);
      l_tick = (l_tick + 1);
    }
  } else {if (l_high == 0) {
      l_i = 5;
    } else {l_i = 0;
      l_i = (l_i + 1);
    }
  }
  int r_tick = 0;
  int r_i;
  if (r_low > 0) {
    r_i = 0;
    while (r_i < r_low) {
      r_i = (r_i + 1);
      r_tick = (r_tick + 1);
    }
    while (r_i > 0) {
      r_i = (r_i - 1);
      r_tick = (r_tick + 1);
    }
  } else {if (r_high == 0) {
      r_i = 5;
    } else {r_i = 0;
      r_i = (r_i + 1);
    }
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_high)
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) r_high)
    (param-declaration (specifiers (type int)) r_low))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_tick (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i no-initializer))
      (if-else
        (> l_low (const-int 0))
        (seq
          (basic-block (= l_i (const-int 0)))
          (seq
            (while
              (< l_i l_low)
              (basic-block (= l_i (+ l_i (const-int 1))) (= l_tick (+ l_tick (const-int 1)))))
            (while
              (> l_i (const-int 0))
              (basic-block (= l_i (- l_i (const-int 1))) (= l_tick (+ l_tick (const-int 1)))))))
        (if-else
          (== l_high (const-int 0))
          (basic-block (= l_i (const-int 5)))
          (basic-block (= l_i (const-int 0)) (= l_i (+ l_i (const-int 1)))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_tick (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i no-initializer))
      (if-else
        (> r_low (const-int 0))
        (seq
          (basic-block (= r_i (const-int 0)))
          (seq
            (while
              (< r_i r_low)
              (basic-block (= r_i (+ r_i (const-int 1))) (= r_tick (+ r_tick (const-int 1)))))
            (while
              (> r_i (const-int 0))
              (basic-block (= r_i (- r_i (const-int 1))) (= r_tick (+ r_tick (const-int 1)))))))
        (if-else
          (== r_high (const-int 0))
          (basic-block (= r_i (const-int 5)))
          (basic-block (= r_i (const-int 0)) (= r_i (+ r_i (const-int 1)))))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_high)
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) r_high)
    (param-declaration (specifiers (type int)) r_low))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_tick (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i no-initializer))
      (basic-block
        (declaration (specifiers (type int)) r_tick (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i no-initializer)))
    (<|>
      (if-else
        (> l_low (const-int 0))
        (seq
          (basic-block (= l_i (const-int 0)))
          (seq
            (while
              (< l_i l_low)
              (basic-block (= l_i (+ l_i (const-int 1))) (= l_tick (+ l_tick (const-int 1)))))
            (while
              (> l_i (const-int 0))
              (basic-block (= l_i (- l_i (const-int 1))) (= l_tick (+ l_tick (const-int 1)))))))
        (if-else
          (== l_high (const-int 0))
          (basic-block (= l_i (const-int 5)))
          (basic-block (= l_i (const-int 0)) (= l_i (+ l_i (const-int 1))))))
      (if-else
        (> r_low (const-int 0))
        (seq
          (basic-block (= r_i (const-int 0)))
          (seq
            (while
              (< r_i r_low)
              (basic-block (= r_i (+ r_i (const-int 1))) (= r_tick (+ r_tick (const-int 1)))))
            (while
              (> r_i (const-int 0))
              (basic-block (= r_i (- r_i (const-int 1))) (= r_tick (+ r_tick (const-int 1)))))))
        (if-else
          (== r_high (const-int 0))
          (basic-block (= r_i (const-int 5)))
          (basic-block (= r_i (const-int 0)) (= r_i (+ r_i (const-int 1)))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_high = arb_int();
  int l_low = arb_int();
  int r_high = arb_int();
  int r_low = arb_int();
  assume(l_low == r_low);
  int l_tick = 0;
  int l_i;
  int r_tick = 0;
  int r_i;
  if (l_low > 0) {
    l_i = 0;
    while (l_i < l_low) {
      l_i = (l_i + 1);
      l_tick = (l_tick + 1);
    }
    while (l_i > 0) {
      l_i = (l_i - 1);
      l_tick = (l_tick + 1);
    }
  } else {if (l_high == 0) {
      l_i = 5;
    } else {l_i = 0;
      l_i = (l_i + 1);
    }
  }
  if (r_low > 0) {
    r_i = 0;
    while (r_i < r_low) {
      r_i = (r_i + 1);
      r_tick = (r_tick + 1);
    }
    while (r_i > 0) {
      r_i = (r_i - 1);
      r_tick = (r_tick + 1);
    }
  } else {if (r_high == 0) {
      r_i = 5;
    } else {r_i = 0;
      r_i = (r_i + 1);
    }
  }
  sassert(l_tick == r_tick);
 }

--------------------------
Writing output to ./results/alignments/seahorn/icra/count-loops/AGHKTW2017_bar-cou.c...
Done

real	0m0.025s
user	0m0.012s
sys	0m0.013s
