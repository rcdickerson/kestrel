
Unaligned Product Program
--------------------------

void main(int l_high, int l_low, int r_high, int r_low) {
  int l_i = l_low;
  int l_tick = 0;
  if (l_low < 0) {
    while (l_i > 0) {
      l_tick = (l_tick + 1);
      l_i = (l_i - 1);
    }
  } else {l_low = (l_low + 10);
    if (l_low >= 10) {
      int l_j = l_low;
      while (l_j > 0) {
        l_j = (l_j - 1);
        l_tick = (l_tick + 1);
      }
    } else {if (l_high < 0) {
        int l_k = l_low;
        while (l_k > 0) {
          l_k = (l_k - 1);
          l_tick = (l_tick + 1);
        }
      }
    }
  }
  int r_i = r_low;
  int r_tick = 0;
  if (r_low < 0) {
    while (r_i > 0) {
      r_tick = (r_tick + 1);
      r_i = (r_i - 1);
    }
  } else {r_low = (r_low + 10);
    if (r_low >= 10) {
      int r_j = r_low;
      while (r_j > 0) {
        r_j = (r_j - 1);
        r_tick = (r_tick + 1);
      }
    } else {if (r_high < 0) {
        int r_k = r_low;
        while (r_k > 0) {
          r_k = (r_k - 1);
          r_tick = (r_tick + 1);
        }
      }
    }
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_high)
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) r_high)
    (param-declaration (specifiers (type int)) r_low))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer l_low))
        (declaration (specifiers (type int)) l_tick (initializer (const-int 0))))
      (if-else
        (< l_low (const-int 0))
        (while
          (> l_i (const-int 0))
          (basic-block (= l_tick (+ l_tick (const-int 1))) (= l_i (- l_i (const-int 1)))))
        (seq
          (basic-block (= l_low (+ l_low (const-int 10))))
          (if-else
            (>= l_low (const-int 10))
            (seq
              (basic-block (declaration (specifiers (type int)) l_j (initializer l_low)))
              (while
                (> l_j (const-int 0))
                (basic-block (= l_j (- l_j (const-int 1))) (= l_tick (+ l_tick (const-int 1))))))
            (if
              (< l_high (const-int 0))
              (seq
                (basic-block (declaration (specifiers (type int)) l_k (initializer l_low)))
                (while
                  (> l_k (const-int 0))
                  (basic-block (= l_k (- l_k (const-int 1))) (= l_tick (+ l_tick (const-int 1)))))))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_i (initializer r_low))
        (declaration (specifiers (type int)) r_tick (initializer (const-int 0))))
      (if-else
        (< r_low (const-int 0))
        (while
          (> r_i (const-int 0))
          (basic-block (= r_tick (+ r_tick (const-int 1))) (= r_i (- r_i (const-int 1)))))
        (seq
          (basic-block (= r_low (+ r_low (const-int 10))))
          (if-else
            (>= r_low (const-int 10))
            (seq
              (basic-block (declaration (specifiers (type int)) r_j (initializer r_low)))
              (while
                (> r_j (const-int 0))
                (basic-block (= r_j (- r_j (const-int 1))) (= r_tick (+ r_tick (const-int 1))))))
            (if
              (< r_high (const-int 0))
              (seq
                (basic-block (declaration (specifiers (type int)) r_k (initializer r_low)))
                (while
                  (> r_k (const-int 0))
                  (basic-block (= r_k (- r_k (const-int 1))) (= r_tick (+ r_tick (const-int 1)))))))))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_high)
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) r_high)
    (param-declaration (specifiers (type int)) r_low))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer l_low))
        (declaration (specifiers (type int)) l_tick (initializer (const-int 0))))
      (if-else
        (< l_low (const-int 0))
        (while
          (> l_i (const-int 0))
          (basic-block (= l_tick (+ l_tick (const-int 1))) (= l_i (- l_i (const-int 1)))))
        (seq
          (basic-block (= l_low (+ l_low (const-int 10))))
          (if-else
            (>= l_low (const-int 10))
            (seq
              (basic-block (declaration (specifiers (type int)) l_j (initializer l_low)))
              (while
                (> l_j (const-int 0))
                (basic-block (= l_j (- l_j (const-int 1))) (= l_tick (+ l_tick (const-int 1))))))
            (if
              (< l_high (const-int 0))
              (seq
                (basic-block (declaration (specifiers (type int)) l_k (initializer l_low)))
                (while
                  (> l_k (const-int 0))
                  (basic-block (= l_k (- l_k (const-int 1))) (= l_tick (+ l_tick (const-int 1)))))))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_i (initializer r_low))
        (declaration (specifiers (type int)) r_tick (initializer (const-int 0))))
      (if-else
        (< r_low (const-int 0))
        (while
          (> r_i (const-int 0))
          (basic-block (= r_tick (+ r_tick (const-int 1))) (= r_i (- r_i (const-int 1)))))
        (seq
          (basic-block (= r_low (+ r_low (const-int 10))))
          (if-else
            (>= r_low (const-int 10))
            (seq
              (basic-block (declaration (specifiers (type int)) r_j (initializer r_low)))
              (while
                (> r_j (const-int 0))
                (basic-block (= r_j (- r_j (const-int 1))) (= r_tick (+ r_tick (const-int 1))))))
            (if
              (< r_high (const-int 0))
              (seq
                (basic-block (declaration (specifiers (type int)) r_k (initializer r_low)))
                (while
                  (> r_k (const-int 0))
                  (basic-block (= r_k (- r_k (const-int 1))) (= r_tick (+ r_tick (const-int 1)))))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_high = arb_int();
  int l_low = arb_int();
  int r_high = arb_int();
  int r_low = arb_int();
  assume(l_low == r_low);
  int l_i = l_low;
  int l_tick = 0;
  if (l_low < 0) {
    while (l_i > 0) {
      l_tick = (l_tick + 1);
      l_i = (l_i - 1);
    }
  } else {l_low = (l_low + 10);
    if (l_low >= 10) {
      int l_j = l_low;
      while (l_j > 0) {
        l_j = (l_j - 1);
        l_tick = (l_tick + 1);
      }
    } else {if (l_high < 0) {
        int l_k = l_low;
        while (l_k > 0) {
          l_k = (l_k - 1);
          l_tick = (l_tick + 1);
        }
      }
    }
  }
  int r_i = r_low;
  int r_tick = 0;
  if (r_low < 0) {
    while (r_i > 0) {
      r_tick = (r_tick + 1);
      r_i = (r_i - 1);
    }
  } else {r_low = (r_low + 10);
    if (r_low >= 10) {
      int r_j = r_low;
      while (r_j > 0) {
        r_j = (r_j - 1);
        r_tick = (r_tick + 1);
      }
    } else {if (r_high < 0) {
        int r_k = r_low;
        while (r_k > 0) {
          r_k = (r_k - 1);
          r_tick = (r_tick + 1);
        }
      }
    }
  }
  sassert(l_tick == r_tick);
 }

--------------------------
Writing output to ./results/alignments/icra/count-loops/AGHKTW2017_loopAndBranch_safe-cou.c...
Done

real	0m0.027s
user	0m0.020s
sys	0m0.006s
