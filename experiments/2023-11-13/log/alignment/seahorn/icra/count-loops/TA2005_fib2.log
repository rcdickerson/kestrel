
Unaligned Product Program
--------------------------

void main(int l_f11, int l_f12, int l_n1, int l_l1, int l_x1, int l_i1, int l_h1, int r_f21, int r_f22, int r_n2, int r_l2, int r_x2, int r_i2, int r_h2) {
  while (l_n1 > 0) {
    l_f11 = (l_f11 + l_f12);
    l_f12 = (l_f11 - l_f12);
    l_n1 = (l_n1 - 1);
  }
  if (l_h1) {
    l_x1 = 1;
  }
  if (!l_h1) {
    l_x1 = 1;
  }
  while (l_i1 < l_f11) {
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
  }
  while (r_n2 > 0) {
    r_f21 = (r_f21 + r_f22);
    r_f22 = (r_f21 - r_f22);
    r_n2 = (r_n2 - 1);
  }
  if (r_h2) {
    r_x2 = 1;
  }
  if (!r_h2) {
    r_x2 = 1;
  }
  while (r_i2 < r_f21) {
    r_l2 = (r_l2 + r_x2);
    r_i2 = (r_i2 + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_f11)
    (param-declaration (specifiers (type int)) l_f12)
    (param-declaration (specifiers (type int)) l_n1)
    (param-declaration (specifiers (type int)) l_l1)
    (param-declaration (specifiers (type int)) l_x1)
    (param-declaration (specifiers (type int)) l_i1)
    (param-declaration (specifiers (type int)) l_h1)
    (param-declaration (specifiers (type int)) r_f21)
    (param-declaration (specifiers (type int)) r_f22)
    (param-declaration (specifiers (type int)) r_n2)
    (param-declaration (specifiers (type int)) r_l2)
    (param-declaration (specifiers (type int)) r_x2)
    (param-declaration (specifiers (type int)) r_i2)
    (param-declaration (specifiers (type int)) r_h2))
  (<|>
    (seq
      (while
        (> l_n1 (const-int 0))
        (basic-block
          (= l_f11 (+ l_f11 l_f12))
          (= l_f12 (- l_f11 l_f12))
          (= l_n1 (- l_n1 (const-int 1)))))
      (seq
        (if l_h1 (basic-block (= l_x1 (const-int 1))))
        (seq
          (if (not l_h1) (basic-block (= l_x1 (const-int 1))))
          (while
            (< l_i1 l_f11)
            (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))))))
    (seq
      (while
        (> r_n2 (const-int 0))
        (basic-block
          (= r_f21 (+ r_f21 r_f22))
          (= r_f22 (- r_f21 r_f22))
          (= r_n2 (- r_n2 (const-int 1)))))
      (seq
        (if r_h2 (basic-block (= r_x2 (const-int 1))))
        (seq
          (if (not r_h2) (basic-block (= r_x2 (const-int 1))))
          (while
            (< r_i2 r_f21)
            (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1))))))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_f11)
    (param-declaration (specifiers (type int)) l_f12)
    (param-declaration (specifiers (type int)) l_n1)
    (param-declaration (specifiers (type int)) l_l1)
    (param-declaration (specifiers (type int)) l_x1)
    (param-declaration (specifiers (type int)) l_i1)
    (param-declaration (specifiers (type int)) l_h1)
    (param-declaration (specifiers (type int)) r_f21)
    (param-declaration (specifiers (type int)) r_f22)
    (param-declaration (specifiers (type int)) r_n2)
    (param-declaration (specifiers (type int)) r_l2)
    (param-declaration (specifiers (type int)) r_x2)
    (param-declaration (specifiers (type int)) r_i2)
    (param-declaration (specifiers (type int)) r_h2))
  (seq
    (seq
      (while-lockstep
        0
        0
        (> l_n1 (const-int 0))
        (> r_n2 (const-int 0))
        (basic-block
          (= l_f11 (+ l_f11 l_f12))
          (= l_f12 (- l_f11 l_f12))
          (= l_n1 (- l_n1 (const-int 1))))
        (basic-block
          (= r_f21 (+ r_f21 r_f22))
          (= r_f22 (- r_f21 r_f22))
          (= r_n2 (- r_n2 (const-int 1))))
        (<|>
          (basic-block
            (= l_f11 (+ l_f11 l_f12))
            (= l_f12 (- l_f11 l_f12))
            (= l_n1 (- l_n1 (const-int 1))))
          (basic-block
            (= r_f21 (+ r_f21 r_f22))
            (= r_f22 (- r_f21 r_f22))
            (= r_n2 (- r_n2 (const-int 1))))))
      (<|>
        (if l_h1 (basic-block (= l_x1 (const-int 1))))
        (if r_h2 (basic-block (= r_x2 (const-int 1))))))
    (seq
      (<|>
        (if (not l_h1) (basic-block (= l_x1 (const-int 1))))
        (if (not r_h2) (basic-block (= r_x2 (const-int 1)))))
      (while-lockstep
        0
        0
        (< l_i1 l_f11)
        (< r_i2 r_f21)
        (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))
        (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1))))
        (<|>
          (basic-block (= l_l1 (+ l_l1 l_x1)) (= l_i1 (+ l_i1 (const-int 1))))
          (basic-block (= r_l2 (+ r_l2 r_x2)) (= r_i2 (+ r_i2 (const-int 1)))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_f11 = arb_int();
  int l_f12 = arb_int();
  int l_n1 = arb_int();
  int l_l1 = arb_int();
  int l_x1 = arb_int();
  int l_i1 = arb_int();
  int l_h1 = arb_int();
  int r_f21 = arb_int();
  int r_f22 = arb_int();
  int r_n2 = arb_int();
  int r_l2 = arb_int();
  int r_x2 = arb_int();
  int r_i2 = arb_int();
  int r_h2 = arb_int();
  assume((l_f11 == r_f21) && ((l_f12 == r_f22) && ((l_n1 == r_n2) && ((l_l1 == r_l2) && ((l_x1 == r_x2) && (l_i1 == r_i2))))));
  while ((l_n1 > 0) && (r_n2 > 0)) {
    l_f11 = (l_f11 + l_f12);
    l_f12 = (l_f11 - l_f12);
    l_n1 = (l_n1 - 1);
    r_f21 = (r_f21 + r_f22);
    r_f22 = (r_f21 - r_f22);
    r_n2 = (r_n2 - 1);
  }
  while (l_n1 > 0) {
    assume(!(r_n2 > 0));
    l_f11 = (l_f11 + l_f12);
    l_f12 = (l_f11 - l_f12);
    l_n1 = (l_n1 - 1);
  }
  while (r_n2 > 0) {
    assume(!(l_n1 > 0));
    r_f21 = (r_f21 + r_f22);
    r_f22 = (r_f21 - r_f22);
    r_n2 = (r_n2 - 1);
  }
  if (l_h1) {
    l_x1 = 1;
  }
  if (r_h2) {
    r_x2 = 1;
  }
  if (!l_h1) {
    l_x1 = 1;
  }
  if (!r_h2) {
    r_x2 = 1;
  }
  while ((l_i1 < l_f11) && (r_i2 < r_f21)) {
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
    r_l2 = (r_l2 + r_x2);
    r_i2 = (r_i2 + 1);
  }
  while (l_i1 < l_f11) {
    assume(!(r_i2 < r_f21));
    l_l1 = (l_l1 + l_x1);
    l_i1 = (l_i1 + 1);
  }
  while (r_i2 < r_f21) {
    assume(!(l_i1 < l_f11));
    r_l2 = (r_l2 + r_x2);
    r_i2 = (r_i2 + 1);
  }
  sassert(l_l1 == r_l2);
 }

--------------------------
Writing output to ./results/alignments/seahorn/icra/count-loops/TA2005_fib2-cou.c...
Done

real	0m0.032s
user	0m0.027s
sys	0m0.004s
