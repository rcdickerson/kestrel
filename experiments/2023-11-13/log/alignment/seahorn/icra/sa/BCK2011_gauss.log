
Unaligned Product Program
--------------------------

void main(int l_n, int r_n) {
  int l_x = 0;
  int l_i = 0;
  while (l_i <= l_n) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  int r_y = 0;
  int r_j = 1;
  while (r_j <= r_n) {
    r_y = (r_y + r_j);
    r_j = (r_j + 1);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_n))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (<= l_i l_n)
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_j (initializer (const-int 1))))
      (while
        (<= r_j r_n)
        (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))))))
--------------------------

Pre-SA Initial Alignment
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_n))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_j (initializer (const-int 1)))))
    (while-lockstep
      0
      0
      (<= l_i l_n)
      (<= r_j r_n)
      (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
      (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))
      (<|>
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))))))
--------------------------
Starting simulated annealing...
Initial score: 0.88561743
Score 0.8616025 at temperature 1
Score 0.8094754 at temperature 0.99975
Score 0.801231 at temperature 0.99958336
Score 0.7851783 at temperature 0.9955837
Score 0.7553517 at temperature 0.9940838
Score 0.7466667 at temperature 0.9940005
Simulated annealing complete.
Saw 135 configurations
Best score: 0.7466667

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_n)
    (param-declaration (specifiers (type int)) r_n))
  (seq
    (|>
      (basic-block
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_j (initializer (const-int 1)))))
    (seq
      (<|
        (basic-block
          (declaration (specifiers (type int)) l_x (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_i (initializer (const-int 0)))))
      (while-lockstep
        1
        0
        (<= l_i l_n)
        (<= r_j r_n)
        (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))
        (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1))))
        (seq
          (|> (basic-block (= r_y (+ r_y r_j)) (= r_j (+ r_j (const-int 1)))))
          (<| (basic-block (= l_x (+ l_x l_i)) (= l_i (+ l_i (const-int 1))))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  int l_n = arb_int();
  int r_n = arb_int();
  assume((l_n == r_n) && ((l_n > 0) && (l_n < 100000)));
  int r_y = 0;
  int r_j = 1;
  int l_x = 0;
  int l_i = 0;
  if (l_i <= l_n) {
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while ((l_i <= l_n) && (r_j <= r_n)) {
    r_y = (r_y + r_j);
    r_j = (r_j + 1);
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while (l_i <= l_n) {
    assume(!(r_j <= r_n));
    l_x = (l_x + l_i);
    l_i = (l_i + 1);
  }
  while (r_j <= r_n) {
    assume(!(l_i <= l_n));
    r_y = (r_y + r_j);
    r_j = (r_j + 1);
  }
  sassert(l_x == r_y);
 }

--------------------------
Writing output to ./results/alignments/icra/sa/BCK2011_gauss-sa.c...
Done

real	0m1.646s
user	0m1.630s
sys	0m0.013s
