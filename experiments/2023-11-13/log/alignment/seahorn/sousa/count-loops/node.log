
Unaligned Product Program
--------------------------

void main() {
  int l_ret = -999;
  if (left_o1_contains_id && left_o2_contains_id) {
    int l_order1 = left_o1_get_id;
    int l_order2 = left_o2_get_id;
    if (l_order1 < l_order2) {
      l_ret = (-1);
    } else {if (l_order1 > l_order2) {
        l_ret = 1;
      } else {l_ret = 0;
      }
    }
  }
  if (l_ret == (-999)) {
    l_ret = (left_o1_get_id - left_o2_get_id);
  }
  int r_ret = -999;
  if (right_o1_contains_id && right_o2_contains_id) {
    int r_order1 = right_o1_get_id;
    int r_order2 = right_o2_get_id;
    if (r_order1 < r_order2) {
      r_ret = (-1);
    } else {if (r_order1 > r_order2) {
        r_ret = 1;
      } else {r_ret = 0;
      }
    }
  }
  if (r_ret == (-999)) {
    r_ret = (right_o1_get_id - right_o2_get_id);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  params
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_ret (initializer (neg (const-int 999)))))
      (seq
        (if
          (&& left_o1_contains_id left_o2_contains_id)
          (seq
            (basic-block
              (declaration (specifiers (type int)) l_order1 (initializer left_o1_get_id))
              (declaration (specifiers (type int)) l_order2 (initializer left_o2_get_id)))
            (if-else
              (< l_order1 l_order2)
              (= l_ret (neg (const-int 1)))
              (if-else (> l_order1 l_order2) (= l_ret (const-int 1)) (= l_ret (const-int 0))))))
        (if
          (== l_ret (neg (const-int 999)))
          (= l_ret (- left_o1_get_id left_o2_get_id)))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_ret (initializer (neg (const-int 999)))))
      (seq
        (if
          (&& right_o1_contains_id right_o2_contains_id)
          (seq
            (basic-block
              (declaration (specifiers (type int)) r_order1 (initializer right_o1_get_id))
              (declaration (specifiers (type int)) r_order2 (initializer right_o2_get_id)))
            (if-else
              (< r_order1 r_order2)
              (= r_ret (neg (const-int 1)))
              (if-else (> r_order1 r_order2) (= r_ret (const-int 1)) (= r_ret (const-int 0))))))
        (if
          (== r_ret (neg (const-int 999)))
          (= r_ret (- right_o1_get_id right_o2_get_id)))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  params
  (seq
    (seq
      (<|>
        (basic-block
          (declaration (specifiers (type int)) l_ret (initializer (neg (const-int 999)))))
        (basic-block
          (declaration (specifiers (type int)) r_ret (initializer (neg (const-int 999))))))
      (<|>
        (if
          (&& left_o1_contains_id left_o2_contains_id)
          (seq
            (basic-block
              (declaration (specifiers (type int)) l_order1 (initializer left_o1_get_id))
              (declaration (specifiers (type int)) l_order2 (initializer left_o2_get_id)))
            (if-else
              (< l_order1 l_order2)
              (= l_ret (neg (const-int 1)))
              (if-else (> l_order1 l_order2) (= l_ret (const-int 1)) (= l_ret (const-int 0))))))
        (if
          (&& right_o1_contains_id right_o2_contains_id)
          (seq
            (basic-block
              (declaration (specifiers (type int)) r_order1 (initializer right_o1_get_id))
              (declaration (specifiers (type int)) r_order2 (initializer right_o2_get_id)))
            (if-else
              (< r_order1 r_order2)
              (= r_ret (neg (const-int 1)))
              (if-else (> r_order1 r_order2) (= r_ret (const-int 1)) (= r_ret (const-int 0))))))))
    (<|>
      (if
        (== l_ret (neg (const-int 999)))
        (= l_ret (- left_o1_get_id left_o2_get_id)))
      (if
        (== r_ret (neg (const-int 999)))
        (= r_ret (- right_o1_get_id right_o2_get_id))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();
int left_o1_contains_id;
int left_o1_get_id;
int left_o2_contains_id;
int left_o2_get_id;
int right_o1_contains_id;
int right_o1_get_id;
int right_o2_contains_id;
int right_o2_get_id;

void main() {
  assume((left_o1_contains_id == right_o2_contains_id) && ((left_o1_get_id == right_o2_get_id) && ((left_o1_contains_id == right_o2_contains_id) && (left_o1_get_id == right_o2_get_id))));
  int l_ret = -999;
  int r_ret = -999;
  if (left_o1_contains_id && left_o2_contains_id) {
    int l_order1 = left_o1_get_id;
    int l_order2 = left_o2_get_id;
    if (l_order1 < l_order2) {
      l_ret = (-1);
    } else {if (l_order1 > l_order2) {
        l_ret = 1;
      } else {l_ret = 0;
      }
    }
  }
  if (right_o1_contains_id && right_o2_contains_id) {
    int r_order1 = right_o1_get_id;
    int r_order2 = right_o2_get_id;
    if (r_order1 < r_order2) {
      r_ret = (-1);
    } else {if (r_order1 > r_order2) {
        r_ret = 1;
      } else {r_ret = 0;
      }
    }
  }
  if (l_ret == (-999)) {
    l_ret = (left_o1_get_id - left_o2_get_id);
  }
  if (r_ret == (-999)) {
    r_ret = (right_o1_get_id - right_o2_get_id);
  }
  sassert(l_ret == (-1 * r_ret));
 }

--------------------------
Writing output to ./results/alignments/seahorn/sousa/count-loops/node-cou.c...
Done

real	0m0.030s
user	0m0.011s
sys	0m0.019s
