
Unaligned Product Program
--------------------------

void main(float l_o1_score[10], float l_o2_score[10], float r_o1_score[10], float r_o2_score[10]) {
  int l_ret = -999;
  int l_comp = 0;
  int l_i = 0;
  while (l_i < 5) {
    if (l_o1_score[l_i] < l_o2_score[l_i]) {
      l_comp = (-1);
    } else {if (l_o2_score[l_i] < l_o1_score[l_i]) {
        l_comp = 1;
      } else {l_comp = 0;
      }
    }
    if (l_comp != 0) {
      l_ret = l_comp;
      break;
    }
    l_i = (l_i + 1);
  }
  if (l_ret == (-999)) {
    l_ret = 0;
  }
  int r_ret = -999;
  int r_comp = 0;
  int r_i = 0;
  while (r_i < 5) {
    if (r_o1_score[r_i] < r_o2_score[r_i]) {
      r_comp = (-1);
    } else {if (r_o2_score[r_i] < r_o1_score[r_i]) {
        r_comp = 1;
      } else {r_comp = 0;
      }
    }
    if (r_comp != 0) {
      r_ret = r_comp;
      break;
    }
    r_i = (r_i + 1);
  }
  if (r_ret == (-999)) {
    r_ret = 0;
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type float))
      (sized-array l_o1_score (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array l_o2_score (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array r_o1_score (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array r_o2_score (array-sizes (const-int 10)))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_ret (initializer (neg (const-int 999))))
        (declaration (specifiers (type int)) l_comp (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (seq
        (while
          (< l_i (const-int 5))
          (seq
            (if-else
              (< (index l_o1_score l_i) (index l_o2_score l_i))
              (basic-block (= l_comp (neg (const-int 1))))
              (if-else
                (< (index l_o2_score l_i) (index l_o1_score l_i))
                (basic-block (= l_comp (const-int 1)))
                (basic-block (= l_comp (const-int 0)))))
            (seq
              (if (!= l_comp (const-int 0)) (basic-block (= l_ret l_comp) break))
              (basic-block (= l_i (+ l_i (const-int 1)))))))
        (if (== l_ret (neg (const-int 999))) (= l_ret (const-int 0)))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_ret (initializer (neg (const-int 999))))
        (declaration (specifiers (type int)) r_comp (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i (initializer (const-int 0))))
      (seq
        (while
          (< r_i (const-int 5))
          (seq
            (if-else
              (< (index r_o1_score r_i) (index r_o2_score r_i))
              (basic-block (= r_comp (neg (const-int 1))))
              (if-else
                (< (index r_o2_score r_i) (index r_o1_score r_i))
                (basic-block (= r_comp (const-int 1)))
                (basic-block (= r_comp (const-int 0)))))
            (seq
              (if (!= r_comp (const-int 0)) (basic-block (= r_ret r_comp) break))
              (basic-block (= r_i (+ r_i (const-int 1)))))))
        (if (== r_ret (neg (const-int 999))) (= r_ret (const-int 0)))))))
--------------------------
Treating naive product as final alignment.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration
      (specifiers (type float))
      (sized-array l_o1_score (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array l_o2_score (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array r_o1_score (array-sizes (const-int 10))))
    (param-declaration
      (specifiers (type float))
      (sized-array r_o2_score (array-sizes (const-int 10)))))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_ret (initializer (neg (const-int 999))))
        (declaration (specifiers (type int)) l_comp (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (seq
        (while
          (< l_i (const-int 5))
          (seq
            (if-else
              (< (index l_o1_score l_i) (index l_o2_score l_i))
              (basic-block (= l_comp (neg (const-int 1))))
              (if-else
                (< (index l_o2_score l_i) (index l_o1_score l_i))
                (basic-block (= l_comp (const-int 1)))
                (basic-block (= l_comp (const-int 0)))))
            (seq
              (if (!= l_comp (const-int 0)) (basic-block (= l_ret l_comp) break))
              (basic-block (= l_i (+ l_i (const-int 1)))))))
        (if (== l_ret (neg (const-int 999))) (= l_ret (const-int 0)))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_ret (initializer (neg (const-int 999))))
        (declaration (specifiers (type int)) r_comp (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_i (initializer (const-int 0))))
      (seq
        (while
          (< r_i (const-int 5))
          (seq
            (if-else
              (< (index r_o1_score r_i) (index r_o2_score r_i))
              (basic-block (= r_comp (neg (const-int 1))))
              (if-else
                (< (index r_o2_score r_i) (index r_o1_score r_i))
                (basic-block (= r_comp (const-int 1)))
                (basic-block (= r_comp (const-int 0)))))
            (seq
              (if (!= r_comp (const-int 0)) (basic-block (= r_ret r_comp) break))
              (basic-block (= r_i (+ r_i (const-int 1)))))))
        (if (== r_ret (neg (const-int 999))) (= r_ret (const-int 0)))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"
extern int arb_int();

void main() {
  float l_o1_score[10];
  float l_o2_score[10];
  float r_o1_score[10];
  float r_o2_score[10];
  int _i = 1;
  while (_i < 10) {
    assume((l_o1_score[_i] == r_o2_score[_i]) && (l_o2_score[_i] == r_o1_score[_i]));
    _i = (_i + 1);
  }
  int l_ret = -999;
  int l_comp = 0;
  int l_i = 0;
  while (l_i < 5) {
    if (l_o1_score[l_i] < l_o2_score[l_i]) {
      l_comp = (-1);
    } else {if (l_o2_score[l_i] < l_o1_score[l_i]) {
        l_comp = 1;
      } else {l_comp = 0;
      }
    }
    if (l_comp != 0) {
      l_ret = l_comp;
      break;
    }
    l_i = (l_i + 1);
  }
  if (l_ret == (-999)) {
    l_ret = 0;
  }
  int r_ret = -999;
  int r_comp = 0;
  int r_i = 0;
  while (r_i < 5) {
    if (r_o1_score[r_i] < r_o2_score[r_i]) {
      r_comp = (-1);
    } else {if (r_o2_score[r_i] < r_o1_score[r_i]) {
        r_comp = 1;
      } else {r_comp = 0;
      }
    }
    if (r_comp != 0) {
      r_ret = r_comp;
      break;
    }
    r_i = (r_i + 1);
  }
  if (r_ret == (-999)) {
    r_ret = 0;
  }
  sassert(l_ret == (-1 * r_ret));
 }

--------------------------
Writing output to ./results/alignments/sousa/unaligned/chromosome-una.c...
Done

real	0m0.027s
user	0m0.005s
sys	0m0.021s
