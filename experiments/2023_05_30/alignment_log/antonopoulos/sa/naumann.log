
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_x, int r_x) {
  int l_y = l_x;
  int l_z = 24;
  int l_w = 0;
  while (l_y > 4) {
    if ((l_w % 2) == 0) {
      l_z = (l_z * l_y);
      l_y = (l_y - 1);
    }
    l_w = (l_w + 1);
  }
  int r_y = r_x;
  int r_z = 16;
  int r_w = 0;
  while (r_y > 4) {
    if ((r_w % 3) == 0) {
      r_z = (r_z * 2);
      r_y = (r_y - 1);
    }
    r_w = (r_w + 1);
  }
 }

--------------------------
Starting simulated annealing...
Score 0.6518254 at temperature 0.9740519
Score 0.6307272 at temperature 0.9520958
Simulated annealing complete.
Saw 478 configurations
Best score: 0.6307272

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_x)
    (param-declaration (specifiers (type int)) r_x))
  (seq
    (seq
      (<|
        (basic-block
          (declaration (specifiers (type int)) l_y (initializer l_x))
          (declaration (specifiers (type int)) l_z (initializer (const-int 24)))
          (declaration (specifiers (type int)) l_w (initializer (const-int 0)))))
      (|>
        (basic-block
          (declaration (specifiers (type int)) r_y (initializer r_x))
          (declaration (specifiers (type int)) r_z (initializer (const-int 16)))
          (declaration (specifiers (type int)) r_w (initializer (const-int 0))))))
    (while-lockstep
      1
      1
      (> l_y (const-int 4))
      (> r_y (const-int 4))
      (seq
        (if
          (== (mod l_w (const-int 2)) (const-int 0))
          (basic-block (= l_z (* l_z l_y)) (= l_y (- l_y (const-int 1)))))
        (basic-block (= l_w (+ l_w (const-int 1)))))
      (seq
        (if
          (== (mod r_w (const-int 3)) (const-int 0))
          (basic-block (= r_z (* r_z (const-int 2))) (= r_y (- r_y (const-int 1)))))
        (basic-block (= r_w (+ r_w (const-int 1))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_x = arb_int();
  int r_x = arb_int();
  assume(l_x == r_x);
  int l_y = l_x;
  int l_z = 24;
  int l_w = 0;
  int r_y = r_x;
  int r_z = 16;
  int r_w = 0;
  while ((l_y > 4) && (r_y > 4)) {
    if ((l_w % 2) == 0) {
      l_z = (l_z * l_y);
      l_y = (l_y - 1);
    }
    l_w = (l_w + 1);
    if ((r_w % 3) == 0) {
      r_z = (r_z * 2);
      r_y = (r_y - 1);
    }
    r_w = (r_w + 1);
  }
  while ((l_y > 4) && (!(r_y > 4))) {
    if ((l_w % 2) == 0) {
      l_z = (l_z * l_y);
      l_y = (l_y - 1);
    }
    l_w = (l_w + 1);
  }
  while ((!(l_y > 4)) && (r_y > 4)) {
    if ((r_w % 3) == 0) {
      r_z = (r_z * 2);
      r_y = (r_y - 1);
    }
    r_w = (r_w + 1);
  }
  sassert(l_z > r_z);
 }

--------------------------
Writing output to ./results/antonopoulos/sa/naumann.c...
Done

real	0m0.223s
user	0m0.187s
sys	0m0.016s
