
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_o1_contains_id, int l_o1_get_id, int l_o2_contains_id, int l_o2_get_id, int r_o1_contains_id, int r_o1_get_id, int r_o2_contains_id, int r_o2_get_id) {
  int l_ret = -999;
  if (l_o1_contains_id && l_o2_contains_id) {
    int l_order1 = l_o1_get_id;
    int l_order2 = l_o2_get_id;
    if (l_order1 < l_order2) {
      l_ret = (-1);
    } else {if (l_order1 > l_order2) {
        l_ret = 1;
      } else {l_ret = 0;
      }
    }
  }
  if (l_ret == (-999)) {
    l_ret = (l_o1_get_id - l_o2_get_id);
  }
  int r_ret = -999;
  if (r_o1_contains_id && r_o2_contains_id) {
    int r_order1 = r_o1_get_id;
    int r_order2 = r_o2_get_id;
    if (r_order1 < r_order2) {
      r_ret = (-1);
    } else {if (r_order1 > r_order2) {
        r_ret = 1;
      } else {r_ret = 0;
      }
    }
  }
  if (r_ret == (-999)) {
    r_ret = (r_o1_get_id - r_o2_get_id);
  }
 }

--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_o1_contains_id)
    (param-declaration (specifiers (type int)) l_o1_get_id)
    (param-declaration (specifiers (type int)) l_o2_contains_id)
    (param-declaration (specifiers (type int)) l_o2_get_id)
    (param-declaration (specifiers (type int)) r_o1_contains_id)
    (param-declaration (specifiers (type int)) r_o1_get_id)
    (param-declaration (specifiers (type int)) r_o2_contains_id)
    (param-declaration (specifiers (type int)) r_o2_get_id))
  (seq
    (<|>
      (basic-block
        (declaration (specifiers (type int)) l_ret (initializer (neg (const-int 999)))))
      (basic-block
        (declaration (specifiers (type int)) r_ret (initializer (neg (const-int 999))))))
    (seq
      (<|>
        (if
          (&& l_o1_contains_id l_o2_contains_id)
          (seq
            (basic-block
              (declaration (specifiers (type int)) l_order1 (initializer l_o1_get_id))
              (declaration (specifiers (type int)) l_order2 (initializer l_o2_get_id)))
            (if-else
              (< l_order1 l_order2)
              (= l_ret (neg (const-int 1)))
              (if-else (> l_order1 l_order2) (= l_ret (const-int 1)) (= l_ret (const-int 0))))))
        (if
          (&& r_o1_contains_id r_o2_contains_id)
          (seq
            (basic-block
              (declaration (specifiers (type int)) r_order1 (initializer r_o1_get_id))
              (declaration (specifiers (type int)) r_order2 (initializer r_o2_get_id)))
            (if-else
              (< r_order1 r_order2)
              (= r_ret (neg (const-int 1)))
              (if-else (> r_order1 r_order2) (= r_ret (const-int 1)) (= r_ret (const-int 0)))))))
      (<|>
        (if (== l_ret (neg (const-int 999))) (= l_ret (- l_o1_get_id l_o2_get_id)))
        (if (== r_ret (neg (const-int 999))) (= r_ret (- r_o1_get_id r_o2_get_id)))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_o1_contains_id = arb_int();
  int l_o1_get_id = arb_int();
  int l_o2_contains_id = arb_int();
  int l_o2_get_id = arb_int();
  int r_o1_contains_id = arb_int();
  int r_o1_get_id = arb_int();
  int r_o2_contains_id = arb_int();
  int r_o2_get_id = arb_int();
  assume((l_o1_contains_id == r_o2_contains_id) && ((l_o1_get_id == r_o2_get_id) && ((l_o1_contains_id == r_o2_contains_id) && (l_o1_get_id == r_o2_get_id))));
  int l_ret = -999;
  int r_ret = -999;
  if (l_o1_contains_id && l_o2_contains_id) {
    int l_order1 = l_o1_get_id;
    int l_order2 = l_o2_get_id;
    if (l_order1 < l_order2) {
      l_ret = (-1);
    } else {if (l_order1 > l_order2) {
        l_ret = 1;
      } else {l_ret = 0;
      }
    }
  }
  if (r_o1_contains_id && r_o2_contains_id) {
    int r_order1 = r_o1_get_id;
    int r_order2 = r_o2_get_id;
    if (r_order1 < r_order2) {
      r_ret = (-1);
    } else {if (r_order1 > r_order2) {
        r_ret = 1;
      } else {r_ret = 0;
      }
    }
  }
  if (l_ret == (-999)) {
    l_ret = (l_o1_get_id - l_o2_get_id);
  }
  if (r_ret == (-999)) {
    r_ret = (r_o1_get_id - r_o2_get_id);
  }
  sassert(l_ret == (-1 * r_ret));
 }

--------------------------
Writing output to ./results/sousa/count-loops/node.c...
Done

real	0m0.028s
user	0m0.016s
sys	0m0.011s
