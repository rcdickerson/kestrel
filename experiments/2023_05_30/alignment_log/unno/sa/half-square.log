
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_low, int l_h, int r_low, int r_h) {
  int l_i = 0;
  int l_y = 0;
  int l_v = 0;
  while (l_h > l_i) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  l_v = 1;
  while (l_low > l_i) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  int r_i = 0;
  int r_y = 0;
  int r_v = 0;
  while (r_h > r_i) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  r_v = 1;
  while (r_low > r_i) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
 }

--------------------------
Starting simulated annealing...
Score 0.80501014 at temperature 0.74251497
Score 0.8046559 at temperature 0.7245509
Score 0.7203444 at temperature 0.6307385
Simulated annealing complete.
Saw 496 configurations
Best score: 0.7203444

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) l_h)
    (param-declaration (specifiers (type int)) r_low)
    (param-declaration (specifiers (type int)) r_h))
  (seq
    (seq
      (seq
        (<|
          (basic-block
            (declaration (specifiers (type int)) l_i (initializer (const-int 0)))
            (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
            (declaration (specifiers (type int)) l_v (initializer (const-int 0)))))
        (<|
          (while
            (> l_h l_i)
            (basic-block (= l_i (+ l_i (const-int 1))) (= l_y (+ l_y l_y))))))
      (seq
        (seq
          (|>
            (basic-block
              (declaration (specifiers (type int)) r_i (initializer (const-int 0)))
              (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
              (declaration (specifiers (type int)) r_v (initializer (const-int 0)))))
          (seq
            (|>
              (while
                (> r_h r_i)
                (basic-block (= r_i (+ r_i (const-int 1))) (= r_y (+ r_y r_y)))))
            (|> (basic-block (= r_v (const-int 1))))))
        (<| (basic-block (= l_v (const-int 1))))))
    (while-lockstep
      1
      1
      (> l_low l_i)
      (> r_low r_i)
      (basic-block (= l_i (+ l_i (const-int 1))) (= l_y (+ l_y l_y)))
      (basic-block (= r_i (+ r_i (const-int 1))) (= r_y (+ r_y r_y))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_low = arb_int();
  int l_h = arb_int();
  int r_low = arb_int();
  int r_h = arb_int();
  assume((l_low == r_low) && ((l_low > l_h) && ((l_h > 0) && ((r_low > r_h) && (r_h > 0)))));
  int l_i = 0;
  int l_y = 0;
  int l_v = 0;
  while (l_h > l_i) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  int r_i = 0;
  int r_y = 0;
  int r_v = 0;
  while (r_h > r_i) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  r_v = 1;
  l_v = 1;
  while ((l_low > l_i) && (r_low > r_i)) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  while ((l_low > l_i) && (!(r_low > r_i))) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  while ((!(l_low > l_i)) && (r_low > r_i)) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  sassert(l_y == r_y);
 }

--------------------------
Writing output to ./results/unno/sa/half-square.c...
Done

real	0m0.649s
user	0m0.613s
sys	0m0.018s
