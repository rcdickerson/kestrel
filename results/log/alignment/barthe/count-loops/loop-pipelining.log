
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_i = 0;
  while (l_i < N) {
    a_1[l_i] = (a_1[l_i] + 1);
    b_1[l_i] = (b_1[l_i] + a_1[l_i]);
    c_1[l_i] = (c_1[l_i] + b_1[l_i]);
    l_i = (l_i + 1);
  }
  int r_j = 0;
  a_2[0] = (a_2[0] + 1);
  b_2[0] = (b_2[0] + a_2[0]);
  a_2[1] = (a_2[1] + 1);
  while (r_j < (N - 2)) {
    a_2[r_j + 2] = (a_2[r_j + 2] + 1);
    b_2[r_j + 1] = (b_2[r_j + 1] + a_2[r_j + 1]);
    c_2[r_j] = (c_2[r_j] + b_2[r_j]);
    r_j = (r_j + 1);
  }
  c_2[r_j] = (c_2[r_j] + b_2[r_j]);
  b_2[r_j + 1] = (b_2[r_j + 1] + a_2[r_j + 1]);
  c_2[r_j + 1] = (c_2[r_j + 1] + b_2[r_j + 1]);
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  params
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
      (while
        (< l_i N)
        (basic-block
          (= (index a_1 l_i) (+ (index a_1 l_i) (const-int 1)))
          (= (index b_1 l_i) (+ (index b_1 l_i) (index a_1 l_i)))
          (= (index c_1 l_i) (+ (index c_1 l_i) (index b_1 l_i)))
          (= l_i (+ l_i (const-int 1))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_j (initializer (const-int 0)))
        (= (index a_2 (const-int 0)) (+ (index a_2 (const-int 0)) (const-int 1)))
        (=
          (index b_2 (const-int 0))
          (+ (index b_2 (const-int 0)) (index a_2 (const-int 0))))
        (= (index a_2 (const-int 1)) (+ (index a_2 (const-int 1)) (const-int 1))))
      (seq
        (while
          (< r_j (- N (const-int 2)))
          (basic-block
            (=
              (index a_2 (+ r_j (const-int 2)))
              (+ (index a_2 (+ r_j (const-int 2))) (const-int 1)))
            (=
              (index b_2 (+ r_j (const-int 1)))
              (+ (index b_2 (+ r_j (const-int 1))) (index a_2 (+ r_j (const-int 1)))))
            (= (index c_2 r_j) (+ (index c_2 r_j) (index b_2 r_j)))
            (= r_j (+ r_j (const-int 1)))))
        (basic-block
          (= (index c_2 r_j) (+ (index c_2 r_j) (index b_2 r_j)))
          (=
            (index b_2 (+ r_j (const-int 1)))
            (+ (index b_2 (+ r_j (const-int 1))) (index a_2 (+ r_j (const-int 1)))))
          (=
            (index c_2 (+ r_j (const-int 1)))
            (+ (index c_2 (+ r_j (const-int 1))) (index b_2 (+ r_j (const-int 1))))))))))
--------------------------
Computed alignment by local loop counting.

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  params
  (seq
    (seq
      (<|>
        (basic-block
          (declaration (specifiers (type int)) l_i (initializer (const-int 0))))
        (basic-block
          (declaration (specifiers (type int)) r_j (initializer (const-int 0)))
          (= (index a_2 (const-int 0)) (+ (index a_2 (const-int 0)) (const-int 1)))
          (=
            (index b_2 (const-int 0))
            (+ (index b_2 (const-int 0)) (index a_2 (const-int 0))))
          (= (index a_2 (const-int 1)) (+ (index a_2 (const-int 1)) (const-int 1)))))
      (while-scheduled
        1
        2
        (< l_i N)
        (< r_j (- N (const-int 2)))
        (basic-block
          (= (index a_1 l_i) (+ (index a_1 l_i) (const-int 1)))
          (= (index b_1 l_i) (+ (index b_1 l_i) (index a_1 l_i)))
          (= (index c_1 l_i) (+ (index c_1 l_i) (index b_1 l_i)))
          (= l_i (+ l_i (const-int 1))))
        (basic-block
          (=
            (index a_2 (+ r_j (const-int 2)))
            (+ (index a_2 (+ r_j (const-int 2))) (const-int 1)))
          (=
            (index b_2 (+ r_j (const-int 1)))
            (+ (index b_2 (+ r_j (const-int 1))) (index a_2 (+ r_j (const-int 1)))))
          (= (index c_2 r_j) (+ (index c_2 r_j) (index b_2 r_j)))
          (= r_j (+ r_j (const-int 1))))))
    (|>
      (basic-block
        (= (index c_2 r_j) (+ (index c_2 r_j) (index b_2 r_j)))
        (=
          (index b_2 (+ r_j (const-int 1)))
          (+ (index b_2 (+ r_j (const-int 1))) (index a_2 (+ r_j (const-int 1)))))
        (=
          (index c_2 (+ r_j (const-int 1)))
          (+ (index c_2 (+ r_j (const-int 1))) (index b_2 (+ r_j (const-int 1)))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();
const int N = 10;
int a_1[N];
int b_1[N];
int c_1[N];
int a_2[N];
int b_2[N];
int c_2[N];

void main() {
  int _i = 0;
  while (_i < N) {
    assume((a_1[_i] == a_2[_i]) && ((b_1[_i] == b_2[_i]) && (c_1[_i] == c_2[_i])));
    _i = (_i + 1);
  }
  int l_i = 0;
  int r_j = 0;
  a_2[0] = (a_2[0] + 1);
  b_2[0] = (b_2[0] + a_2[0]);
  a_2[1] = (a_2[1] + 1);
  while ((l_i < N) && (r_j < (N - 2))) {
    a_1[l_i] = (a_1[l_i] + 1);
    b_1[l_i] = (b_1[l_i] + a_1[l_i]);
    c_1[l_i] = (c_1[l_i] + b_1[l_i]);
    l_i = (l_i + 1);
    a_2[r_j + 2] = (a_2[r_j + 2] + 1);
    b_2[r_j + 1] = (b_2[r_j + 1] + a_2[r_j + 1]);
    c_2[r_j] = (c_2[r_j] + b_2[r_j]);
    r_j = (r_j + 1);
    if (r_j < (N - 2)) {
      a_2[r_j + 2] = (a_2[r_j + 2] + 1);
      b_2[r_j + 1] = (b_2[r_j + 1] + a_2[r_j + 1]);
      c_2[r_j] = (c_2[r_j] + b_2[r_j]);
      r_j = (r_j + 1);
    }
  }
  while ((l_i < N) && (!(r_j < (N - 2)))) {
    a_1[l_i] = (a_1[l_i] + 1);
    b_1[l_i] = (b_1[l_i] + a_1[l_i]);
    c_1[l_i] = (c_1[l_i] + b_1[l_i]);
    l_i = (l_i + 1);
  }
  while ((!(l_i < N)) && (r_j < (N - 2))) {
    a_2[r_j + 2] = (a_2[r_j + 2] + 1);
    b_2[r_j + 1] = (b_2[r_j + 1] + a_2[r_j + 1]);
    c_2[r_j] = (c_2[r_j] + b_2[r_j]);
    r_j = (r_j + 1);
  }
  c_2[r_j] = (c_2[r_j] + b_2[r_j]);
  b_2[r_j + 1] = (b_2[r_j + 1] + a_2[r_j + 1]);
  c_2[r_j + 1] = (c_2[r_j + 1] + b_2[r_j + 1]);
  int _j = 0;
  while (_j < N) {
    sassert((a_1[_j] == a_2[_j]) && ((b_1[_j] == b_2[_j]) && (c_1[_j] == c_2[_j])));
    _j = (_j + 1);
  }
 }

--------------------------
Writing output to ./results/alignments/barthe/count-loops/loop-pipelining.c...
Done

real	0m0.043s
user	0m0.169s
sys	0m0.125s
