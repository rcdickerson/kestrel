
Unaligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main(int l_low, int l_h, int r_low, int r_h) {
  int l_i = 0;
  int l_y = 0;
  int l_v = 0;
  while (l_h > l_i) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  l_v = 1;
  while (l_low > l_i) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  int r_i = 0;
  int r_y = 0;
  int r_v = 0;
  while (r_h > r_i) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  r_v = 1;
  while (r_low > r_i) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
 }

--------------------------

Unaligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) l_h)
    (param-declaration (specifiers (type int)) r_low)
    (param-declaration (specifiers (type int)) r_h))
  (<|>
    (seq
      (basic-block
        (declaration (specifiers (type int)) l_i (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) l_v (initializer (const-int 0))))
      (seq
        (while
          (> l_h l_i)
          (basic-block (= l_i (+ l_i (const-int 1))) (= l_y (+ l_y l_y))))
        (seq
          (basic-block (= l_v (const-int 1)))
          (while
            (> l_low l_i)
            (basic-block (= l_i (+ l_i (const-int 1))) (= l_y (+ l_y l_y)))))))
    (seq
      (basic-block
        (declaration (specifiers (type int)) r_i (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
        (declaration (specifiers (type int)) r_v (initializer (const-int 0))))
      (seq
        (while
          (> r_h r_i)
          (basic-block (= r_i (+ r_i (const-int 1))) (= r_y (+ r_y r_y))))
        (seq
          (basic-block (= r_v (const-int 1)))
          (while
            (> r_low r_i)
            (basic-block (= r_i (+ r_i (const-int 1))) (= r_y (+ r_y r_y)))))))))
--------------------------
Starting simulated annealing...
Initial score: 0.8566667
Score 0.8266667 at temperature 0.9906698
Score 0.73510814 at temperature 0.97834057
Score 0.70519054 at temperature 0.71242917
Score 0.63453335 at temperature 0.7107631
Score 0.48198095 at temperature 0.7094302
Simulated annealing complete.
Saw 2978 configurations
Best score: 0.48198095

Aligned Eggroll
--------------------------
(fundef
  (specifiers (type void))
  main
  (params
    (param-declaration (specifiers (type int)) l_low)
    (param-declaration (specifiers (type int)) l_h)
    (param-declaration (specifiers (type int)) r_low)
    (param-declaration (specifiers (type int)) r_h))
  (seq
    (seq
      (<|>
        (basic-block
          (declaration (specifiers (type int)) l_i (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_y (initializer (const-int 0)))
          (declaration (specifiers (type int)) l_v (initializer (const-int 0))))
        (basic-block
          (declaration (specifiers (type int)) r_i (initializer (const-int 0)))
          (declaration (specifiers (type int)) r_y (initializer (const-int 0)))
          (declaration (specifiers (type int)) r_v (initializer (const-int 0)))))
      (while-scheduled
        1
        2
        (> l_h l_i)
        (> r_h r_i)
        (basic-block (= l_i (+ l_i (const-int 1))) (= l_y (+ l_y l_y)))
        (basic-block (= r_i (+ r_i (const-int 1))) (= r_y (+ r_y r_y)))))
    (seq
      (<| (basic-block (= l_v (const-int 1))))
      (seq
        (|> (basic-block (= r_v (const-int 1))))
        (while-scheduled
          2
          1
          (> l_low l_i)
          (> r_low r_i)
          (basic-block (= l_i (+ l_i (const-int 1))) (= l_y (+ l_y l_y)))
          (basic-block (= r_i (+ r_i (const-int 1))) (= r_y (+ r_y r_y))))))))
--------------------------

Aligned Product Program
--------------------------
#include "seahorn/seahorn.h"

extern int arb_int();

void main() {
  int l_low = arb_int();
  int l_h = arb_int();
  int r_low = arb_int();
  int r_h = arb_int();
  assume((l_low == r_low) && ((l_low > l_h) && ((l_h > 0) && ((r_low > r_h) && (r_h > 0)))));
  int l_i = 0;
  int l_y = 0;
  int l_v = 0;
  int r_i = 0;
  int r_y = 0;
  int r_v = 0;
  while ((l_h > l_i) && (r_h > r_i)) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
    if (r_h > r_i) {
      r_i = (r_i + 1);
      r_y = (r_y + r_y);
    }
  }
  while ((l_h > l_i) && (!(r_h > r_i))) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  while ((!(l_h > l_i)) && (r_h > r_i)) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  l_v = 1;
  r_v = 1;
  while ((l_low > l_i) && (r_low > r_i)) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
    if (l_low > l_i) {
      l_i = (l_i + 1);
      l_y = (l_y + l_y);
    }
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  while ((l_low > l_i) && (!(r_low > r_i))) {
    l_i = (l_i + 1);
    l_y = (l_y + l_y);
  }
  while ((!(l_low > l_i)) && (r_low > r_i)) {
    r_i = (r_i + 1);
    r_y = (r_y + r_y);
  }
  sassert(l_y == r_y);
 }

--------------------------
Writing output to ./results/alignments/unno/sa/half-square.c...
Done

real	0m3.815s
user	0m4.044s
sys	0m0.214s
